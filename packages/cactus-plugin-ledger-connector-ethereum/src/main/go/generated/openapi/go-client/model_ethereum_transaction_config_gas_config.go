/*
Hyperledger Cacti Plugin - Connector Ethereum

Can perform basic tasks on a Ethereum ledger

API version: 2.0.0-rc.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-ethereum

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// EthereumTransactionConfigGasConfig - Transaction gas settings.
type EthereumTransactionConfigGasConfig struct {
	GasTransactionConfigEIP1559 *GasTransactionConfigEIP1559
	GasTransactionConfigLegacy *GasTransactionConfigLegacy
}

// GasTransactionConfigEIP1559AsEthereumTransactionConfigGasConfig is a convenience function that returns GasTransactionConfigEIP1559 wrapped in EthereumTransactionConfigGasConfig
func GasTransactionConfigEIP1559AsEthereumTransactionConfigGasConfig(v *GasTransactionConfigEIP1559) EthereumTransactionConfigGasConfig {
	return EthereumTransactionConfigGasConfig{
		GasTransactionConfigEIP1559: v,
	}
}

// GasTransactionConfigLegacyAsEthereumTransactionConfigGasConfig is a convenience function that returns GasTransactionConfigLegacy wrapped in EthereumTransactionConfigGasConfig
func GasTransactionConfigLegacyAsEthereumTransactionConfigGasConfig(v *GasTransactionConfigLegacy) EthereumTransactionConfigGasConfig {
	return EthereumTransactionConfigGasConfig{
		GasTransactionConfigLegacy: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EthereumTransactionConfigGasConfig) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GasTransactionConfigEIP1559
	err = newStrictDecoder(data).Decode(&dst.GasTransactionConfigEIP1559)
	if err == nil {
		jsonGasTransactionConfigEIP1559, _ := json.Marshal(dst.GasTransactionConfigEIP1559)
		if string(jsonGasTransactionConfigEIP1559) == "{}" { // empty struct
			dst.GasTransactionConfigEIP1559 = nil
		} else {
			if err = validator.Validate(dst.GasTransactionConfigEIP1559); err != nil {
				dst.GasTransactionConfigEIP1559 = nil
			} else {
				match++
			}
		}
	} else {
		dst.GasTransactionConfigEIP1559 = nil
	}

	// try to unmarshal data into GasTransactionConfigLegacy
	err = newStrictDecoder(data).Decode(&dst.GasTransactionConfigLegacy)
	if err == nil {
		jsonGasTransactionConfigLegacy, _ := json.Marshal(dst.GasTransactionConfigLegacy)
		if string(jsonGasTransactionConfigLegacy) == "{}" { // empty struct
			dst.GasTransactionConfigLegacy = nil
		} else {
			if err = validator.Validate(dst.GasTransactionConfigLegacy); err != nil {
				dst.GasTransactionConfigLegacy = nil
			} else {
				match++
			}
		}
	} else {
		dst.GasTransactionConfigLegacy = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GasTransactionConfigEIP1559 = nil
		dst.GasTransactionConfigLegacy = nil

		return fmt.Errorf("data matches more than one schema in oneOf(EthereumTransactionConfigGasConfig)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(EthereumTransactionConfigGasConfig)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EthereumTransactionConfigGasConfig) MarshalJSON() ([]byte, error) {
	if src.GasTransactionConfigEIP1559 != nil {
		return json.Marshal(&src.GasTransactionConfigEIP1559)
	}

	if src.GasTransactionConfigLegacy != nil {
		return json.Marshal(&src.GasTransactionConfigLegacy)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EthereumTransactionConfigGasConfig) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GasTransactionConfigEIP1559 != nil {
		return obj.GasTransactionConfigEIP1559
	}

	if obj.GasTransactionConfigLegacy != nil {
		return obj.GasTransactionConfigLegacy
	}

	// all schemas are nil
	return nil
}

type NullableEthereumTransactionConfigGasConfig struct {
	value *EthereumTransactionConfigGasConfig
	isSet bool
}

func (v NullableEthereumTransactionConfigGasConfig) Get() *EthereumTransactionConfigGasConfig {
	return v.value
}

func (v *NullableEthereumTransactionConfigGasConfig) Set(val *EthereumTransactionConfigGasConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableEthereumTransactionConfigGasConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableEthereumTransactionConfigGasConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEthereumTransactionConfigGasConfig(val *EthereumTransactionConfigGasConfig) *NullableEthereumTransactionConfigGasConfig {
	return &NullableEthereumTransactionConfigGasConfig{value: val, isSet: true}
}

func (v NullableEthereumTransactionConfigGasConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEthereumTransactionConfigGasConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


