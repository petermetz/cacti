/**
 * Hyperledger Cacti Plugin - Besu Connector
 * Can perform basic tasks on a Besu ledger such as executing transactions, streaming blocks or solidity smart contract events.
 *
 * The version of the OpenAPI document: 2.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface BackingLedgerUnavailableError
 */
export interface BackingLedgerUnavailableError {
    /**
     *
     * @type {string}
     * @memberof BackingLedgerUnavailableError
     */
    'message'?: string;
}
/**
 *
 * @export
 * @interface BesuPrivateTransactionConfig
 */
export interface BesuPrivateTransactionConfig {
    /**
     *
     * @type {string}
     * @memberof BesuPrivateTransactionConfig
     */
    'privateFrom': string;
    /**
     *
     * @type {Array<any>}
     * @memberof BesuPrivateTransactionConfig
     */
    'privateFor': Array<any>;
}
/**
 *
 * @export
 * @interface BesuTransactionConfig
 */
export interface BesuTransactionConfig {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof BesuTransactionConfig
     */
    'rawTransaction'?: string;
    /**
     *
     * @type {Web3BlockHeaderTimestamp}
     * @memberof BesuTransactionConfig
     */
    'from'?: Web3BlockHeaderTimestamp;
    /**
     *
     * @type {BesuTransactionConfigTo}
     * @memberof BesuTransactionConfig
     */
    'to'?: BesuTransactionConfigTo;
    /**
     *
     * @type {Web3BlockHeaderTimestamp}
     * @memberof BesuTransactionConfig
     */
    'value'?: Web3BlockHeaderTimestamp;
    /**
     *
     * @type {Web3BlockHeaderTimestamp}
     * @memberof BesuTransactionConfig
     */
    'gas'?: Web3BlockHeaderTimestamp;
    /**
     *
     * @type {Web3BlockHeaderTimestamp}
     * @memberof BesuTransactionConfig
     */
    'gasPrice'?: Web3BlockHeaderTimestamp;
    /**
     *
     * @type {number}
     * @memberof BesuTransactionConfig
     */
    'nonce'?: number;
    /**
     *
     * @type {BesuTransactionConfigTo}
     * @memberof BesuTransactionConfig
     */
    'data'?: BesuTransactionConfigTo;
}
/**
 * @type BesuTransactionConfigTo
 * @export
 */
export type BesuTransactionConfigTo = string;
/**
 *
 * @export
 * @interface ConsistencyStrategy
 */
export interface ConsistencyStrategy {
    /**
     *
     * @type {ReceiptType}
     * @memberof ConsistencyStrategy
     */
    'receiptType': ReceiptType;
    /**
     * The amount of milliseconds to wait for the receipt to arrive to the connector. Defaults to 0 which means to wait for an unlimited amount of time. Note that this wait may be interrupted still by other parts of the infrastructure such as load balancers cutting of HTTP requests after some time even if they are the type that is supposed to be kept alive. The question of re-entrance is a broader topic not in scope to discuss here, but it is important to mention it.
     * @type {number}
     * @memberof ConsistencyStrategy
     */
    'timeoutMs'?: number;
    /**
     * The number of blocks to wait to be confirmed in addition to the block containing the transaction in question. Note that if the receipt type is set to only wait for node transaction pool ACK and this parameter is set to anything, but zero then the API will not accept the request due to conflicting parameters.
     * @type {number}
     * @memberof ConsistencyStrategy
     */
    'blockConfirmations': number;
}
/**
 *
 * @export
 * @interface DeployContractSolidityBytecodeNoKeychainV1Request
 */
export interface DeployContractSolidityBytecodeNoKeychainV1Request {
    /**
     * The contract name for retrieve the contracts json on the keychain.
     * @type {string}
     * @memberof DeployContractSolidityBytecodeNoKeychainV1Request
     */
    'contractName': string;
    /**
     * The application binary interface of the solidity contract
     * @type {Array<any>}
     * @memberof DeployContractSolidityBytecodeNoKeychainV1Request
     */
    'contractAbi': Array<any>;
    /**
     *
     * @type {Array<any>}
     * @memberof DeployContractSolidityBytecodeNoKeychainV1Request
     */
    'constructorArgs': Array<any>;
    /**
     *
     * @type {Web3SigningCredential}
     * @memberof DeployContractSolidityBytecodeNoKeychainV1Request
     */
    'web3SigningCredential': Web3SigningCredential;
    /**
     * See https://ethereum.stackexchange.com/a/47556 regarding the maximum length of the bytecode. 2 + (24576 * 2) = 49154 meaning that hex stores each byte in 2 characters and that there is a 0x prefix (2 characters) which does not count towards the EVM 24576 bytecode limit.
     * @type {string}
     * @memberof DeployContractSolidityBytecodeNoKeychainV1Request
     */
    'bytecode': string;
    /**
     *
     * @type {number}
     * @memberof DeployContractSolidityBytecodeNoKeychainV1Request
     */
    'gas'?: number;
    /**
     *
     * @type {string}
     * @memberof DeployContractSolidityBytecodeNoKeychainV1Request
     */
    'gasPrice'?: string;
    /**
     * The amount of milliseconds to wait for a transaction receipt with theaddress of the contract(which indicates successful deployment) beforegiving up and crashing.
     * @type {number}
     * @memberof DeployContractSolidityBytecodeNoKeychainV1Request
     */
    'timeoutMs'?: number;
    /**
     *
     * @type {BesuPrivateTransactionConfig}
     * @memberof DeployContractSolidityBytecodeNoKeychainV1Request
     */
    'privateTransactionConfig'?: BesuPrivateTransactionConfig;
}
/**
 *
 * @export
 * @interface DeployContractSolidityBytecodeV1Request
 */
export interface DeployContractSolidityBytecodeV1Request {
    /**
     * The contract name for retrieve the contracts json on the keychain.
     * @type {string}
     * @memberof DeployContractSolidityBytecodeV1Request
     */
    'contractName': string;
    /**
     * The application binary interface of the solidity contract
     * @type {Array<any>}
     * @memberof DeployContractSolidityBytecodeV1Request
     */
    'contractAbi': Array<any>;
    /**
     *
     * @type {Array<any>}
     * @memberof DeployContractSolidityBytecodeV1Request
     */
    'constructorArgs': Array<any>;
    /**
     *
     * @type {Web3SigningCredential}
     * @memberof DeployContractSolidityBytecodeV1Request
     */
    'web3SigningCredential': Web3SigningCredential;
    /**
     * See https://ethereum.stackexchange.com/a/47556 regarding the maximum length of the bytecode. 2 + (24576 * 2) = 49154 meaning that hex stores each byte in 2 characters and that there is a 0x prefix (2 characters) which does not count towards the EVM 24576 bytecode limit.
     * @type {string}
     * @memberof DeployContractSolidityBytecodeV1Request
     */
    'bytecode': string;
    /**
     * The keychainId for retrieve the contracts json.
     * @type {string}
     * @memberof DeployContractSolidityBytecodeV1Request
     */
    'keychainId': string;
    /**
     *
     * @type {number}
     * @memberof DeployContractSolidityBytecodeV1Request
     */
    'gas'?: number;
    /**
     *
     * @type {string}
     * @memberof DeployContractSolidityBytecodeV1Request
     */
    'gasPrice'?: string;
    /**
     * The amount of milliseconds to wait for a transaction receipt with theaddress of the contract(which indicates successful deployment) beforegiving up and crashing.
     * @type {number}
     * @memberof DeployContractSolidityBytecodeV1Request
     */
    'timeoutMs'?: number;
    /**
     *
     * @type {BesuPrivateTransactionConfig}
     * @memberof DeployContractSolidityBytecodeV1Request
     */
    'privateTransactionConfig'?: BesuPrivateTransactionConfig;
}
/**
 *
 * @export
 * @interface DeployContractSolidityBytecodeV1Response
 */
export interface DeployContractSolidityBytecodeV1Response {
    /**
     *
     * @type {Web3TransactionReceipt}
     * @memberof DeployContractSolidityBytecodeV1Response
     */
    'transactionReceipt': Web3TransactionReceipt;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const EthContractInvocationType: {
    readonly Send: "SEND";
    readonly Call: "CALL";
};
export type EthContractInvocationType = typeof EthContractInvocationType[keyof typeof EthContractInvocationType];
/**
 *
 * @export
 * @interface EvmBlock
 */
export interface EvmBlock {
    /**
     *
     * @type {number}
     * @memberof EvmBlock
     */
    'number'?: number;
    /**
     *
     * @type {string}
     * @memberof EvmBlock
     */
    'hash'?: string;
    /**
     *
     * @type {string}
     * @memberof EvmBlock
     */
    'parentHash'?: string;
    /**
     *
     * @type {string}
     * @memberof EvmBlock
     */
    'nonce'?: string;
    /**
     *
     * @type {string}
     * @memberof EvmBlock
     */
    'sha3Uncles'?: string;
    /**
     *
     * @type {string}
     * @memberof EvmBlock
     */
    'logsBloom'?: string;
    /**
     *
     * @type {string}
     * @memberof EvmBlock
     */
    'transactionsRoot'?: string;
    /**
     *
     * @type {string}
     * @memberof EvmBlock
     */
    'stateRoot'?: string;
    /**
     *
     * @type {string}
     * @memberof EvmBlock
     */
    'miner'?: string;
    /**
     *
     * @type {number}
     * @memberof EvmBlock
     */
    'difficulty'?: number;
    /**
     *
     * @type {number}
     * @memberof EvmBlock
     */
    'totalDifficulty'?: number;
    /**
     *
     * @type {string}
     * @memberof EvmBlock
     */
    'extraData'?: string;
    /**
     *
     * @type {number}
     * @memberof EvmBlock
     */
    'size'?: number;
    /**
     *
     * @type {number}
     * @memberof EvmBlock
     */
    'gasLimit'?: number;
    /**
     *
     * @type {number}
     * @memberof EvmBlock
     */
    'gasUsed'?: number;
    /**
     *
     * @type {any}
     * @memberof EvmBlock
     */
    'timestamp'?: any;
    /**
     *
     * @type {Array<any>}
     * @memberof EvmBlock
     */
    'transactions'?: Array<any>;
    /**
     *
     * @type {Array<any>}
     * @memberof EvmBlock
     */
    'uncles'?: Array<any>;
}
/**
 *
 * @export
 * @interface EvmLog
 */
export interface EvmLog {
    /**
     *
     * @type {string}
     * @memberof EvmLog
     */
    'address': string;
    /**
     *
     * @type {string}
     * @memberof EvmLog
     */
    'data': string;
    /**
     *
     * @type {string}
     * @memberof EvmLog
     */
    'blockHash': string;
    /**
     *
     * @type {string}
     * @memberof EvmLog
     */
    'transactionHash': string;
    /**
     *
     * @type {Array<string>}
     * @memberof EvmLog
     */
    'topics': Array<string>;
    /**
     *
     * @type {number}
     * @memberof EvmLog
     */
    'logIndex': number;
    /**
     *
     * @type {number}
     * @memberof EvmLog
     */
    'transactionIndex': number;
    /**
     *
     * @type {number}
     * @memberof EvmLog
     */
    'blockNumber': number;
}
/**
 *
 * @export
 * @interface EvmTransaction
 */
export interface EvmTransaction {
    /**
     *
     * @type {string}
     * @memberof EvmTransaction
     */
    'hash'?: string;
    /**
     *
     * @type {number}
     * @memberof EvmTransaction
     */
    'nonce'?: number;
    /**
     *
     * @type {any}
     * @memberof EvmTransaction
     */
    'blockHash'?: any;
    /**
     *
     * @type {any}
     * @memberof EvmTransaction
     */
    'blockNumber'?: any;
    /**
     *
     * @type {any}
     * @memberof EvmTransaction
     */
    'transactionIndex'?: any;
    /**
     *
     * @type {string}
     * @memberof EvmTransaction
     */
    'from'?: string;
    /**
     *
     * @type {any}
     * @memberof EvmTransaction
     */
    'to'?: any;
    /**
     *
     * @type {string}
     * @memberof EvmTransaction
     */
    'value'?: string;
    /**
     *
     * @type {string}
     * @memberof EvmTransaction
     */
    'gasPrice'?: string;
    /**
     *
     * @type {number}
     * @memberof EvmTransaction
     */
    'gas'?: number;
    /**
     *
     * @type {string}
     * @memberof EvmTransaction
     */
    'input'?: string;
}
/**
 *
 * @export
 * @interface GetBalanceV1Request
 */
export interface GetBalanceV1Request {
    /**
     *
     * @type {string}
     * @memberof GetBalanceV1Request
     */
    'address': string;
    /**
     *
     * @type {any}
     * @memberof GetBalanceV1Request
     */
    'defaultBlock'?: any;
}
/**
 *
 * @export
 * @interface GetBalanceV1Response
 */
export interface GetBalanceV1Response {
    /**
     *
     * @type {string}
     * @memberof GetBalanceV1Response
     */
    'balance': string;
}
/**
 *
 * @export
 * @interface GetBesuRecordV1Request
 */
export interface GetBesuRecordV1Request {
    /**
     *
     * @type {InvokeContractV1Request}
     * @memberof GetBesuRecordV1Request
     */
    'invokeCall'?: InvokeContractV1Request;
    /**
     *
     * @type {string}
     * @memberof GetBesuRecordV1Request
     */
    'transactionHash'?: string;
}
/**
 *
 * @export
 * @interface GetBesuRecordV1Response
 */
export interface GetBesuRecordV1Response {
    /**
     *
     * @type {string}
     * @memberof GetBesuRecordV1Response
     */
    'ledgerId'?: string;
    /**
     *
     * @type {string}
     * @memberof GetBesuRecordV1Response
     */
    'stateContract'?: string;
    /**
     *
     * @type {any}
     * @memberof GetBesuRecordV1Response
     */
    'transactionInputData'?: any;
    /**
     *
     * @type {any}
     * @memberof GetBesuRecordV1Response
     */
    'callOutput'?: any;
}
/**
 *
 * @export
 * @interface GetBlockV1Request
 */
export interface GetBlockV1Request {
    /**
     *
     * @type {any}
     * @memberof GetBlockV1Request
     */
    'blockHashOrBlockNumber': any;
}
/**
 *
 * @export
 * @interface GetBlockV1Response
 */
export interface GetBlockV1Response {
    /**
     *
     * @type {EvmBlock}
     * @memberof GetBlockV1Response
     */
    'block': EvmBlock;
}
/**
 *
 * @export
 * @interface GetPastLogsV1Request
 */
export interface GetPastLogsV1Request {
    /**
     *
     * @type {any}
     * @memberof GetPastLogsV1Request
     */
    'toBlock'?: any;
    /**
     *
     * @type {any}
     * @memberof GetPastLogsV1Request
     */
    'fromBlock'?: any;
    /**
     *
     * @type {any}
     * @memberof GetPastLogsV1Request
     */
    'address'?: any;
    /**
     *
     * @type {Array<any>}
     * @memberof GetPastLogsV1Request
     */
    'topics'?: Array<any>;
}
/**
 *
 * @export
 * @interface GetPastLogsV1Response
 */
export interface GetPastLogsV1Response {
    /**
     *
     * @type {Array<EvmLog>}
     * @memberof GetPastLogsV1Response
     */
    'logs': Array<EvmLog>;
}
/**
 *
 * @export
 * @interface GetTransactionV1Request
 */
export interface GetTransactionV1Request {
    /**
     *
     * @type {string}
     * @memberof GetTransactionV1Request
     */
    'transactionHash': string;
}
/**
 *
 * @export
 * @interface GetTransactionV1Response
 */
export interface GetTransactionV1Response {
    /**
     *
     * @type {EvmTransaction}
     * @memberof GetTransactionV1Response
     */
    'transaction': EvmTransaction;
}
/**
 *
 * @export
 * @interface InvokeContractV1Request
 */
export interface InvokeContractV1Request {
    /**
     *
     * @type {string}
     * @memberof InvokeContractV1Request
     */
    'contractName': string;
    /**
     *
     * @type {Web3SigningCredential}
     * @memberof InvokeContractV1Request
     */
    'signingCredential': Web3SigningCredential;
    /**
     *
     * @type {EthContractInvocationType}
     * @memberof InvokeContractV1Request
     */
    'invocationType': EthContractInvocationType;
    /**
     * The name of the contract method to invoke.
     * @type {string}
     * @memberof InvokeContractV1Request
     */
    'methodName': string;
    /**
     * The list of arguments to pass in to the contract method being invoked.
     * @type {Array<any>}
     * @memberof InvokeContractV1Request
     */
    'params': Array<any>;
    /**
     * The application binary interface of the solidity contract, optional parameter
     * @type {Array<any>}
     * @memberof InvokeContractV1Request
     */
    'contractAbi'?: Array<any>;
    /**
     * Address of the solidity contract, optional parameter
     * @type {string}
     * @memberof InvokeContractV1Request
     */
    'contractAddress'?: string;
    /**
     *
     * @type {Web3BlockHeaderTimestamp}
     * @memberof InvokeContractV1Request
     */
    'value'?: Web3BlockHeaderTimestamp;
    /**
     *
     * @type {Web3BlockHeaderTimestamp}
     * @memberof InvokeContractV1Request
     */
    'gas'?: Web3BlockHeaderTimestamp;
    /**
     *
     * @type {Web3BlockHeaderTimestamp}
     * @memberof InvokeContractV1Request
     */
    'gasPrice'?: Web3BlockHeaderTimestamp;
    /**
     *
     * @type {number}
     * @memberof InvokeContractV1Request
     */
    'nonce'?: number;
    /**
     * The amount of milliseconds to wait for a transaction receipt beforegiving up and crashing. Only has any effect if the invocation type is SEND
     * @type {number}
     * @memberof InvokeContractV1Request
     */
    'timeoutMs'?: number;
    /**
     * The keychainId for retrieve the contracts json.
     * @type {string}
     * @memberof InvokeContractV1Request
     */
    'keychainId'?: string;
    /**
     *
     * @type {BesuPrivateTransactionConfig}
     * @memberof InvokeContractV1Request
     */
    'privateTransactionConfig'?: BesuPrivateTransactionConfig;
}
/**
 *
 * @export
 * @interface InvokeContractV1Response
 */
export interface InvokeContractV1Response {
    /**
     *
     * @type {Web3TransactionReceipt}
     * @memberof InvokeContractV1Response
     */
    'transactionReceipt'?: Web3TransactionReceipt;
    /**
     *
     * @type {any}
     * @memberof InvokeContractV1Response
     */
    'callOutput'?: any;
    /**
     *
     * @type {boolean}
     * @memberof InvokeContractV1Response
     */
    'success': boolean;
}
/**
 * Enumerates the possible types of receipts that can be waited for by someone or something that has requested the execution of a transaction on a ledger.
 * @export
 * @enum {string}
 */
export declare const ReceiptType: {
    readonly NodeTxPoolAck: "NODE_TX_POOL_ACK";
    readonly LedgerBlockAck: "LEDGER_BLOCK_ACK";
};
export type ReceiptType = typeof ReceiptType[keyof typeof ReceiptType];
/**
 *
 * @export
 * @interface RunTransactionRequest
 */
export interface RunTransactionRequest {
    /**
     *
     * @type {Web3SigningCredential}
     * @memberof RunTransactionRequest
     */
    'web3SigningCredential': Web3SigningCredential;
    /**
     *
     * @type {BesuTransactionConfig}
     * @memberof RunTransactionRequest
     */
    'transactionConfig': BesuTransactionConfig;
    /**
     *
     * @type {ConsistencyStrategy}
     * @memberof RunTransactionRequest
     */
    'consistencyStrategy': ConsistencyStrategy;
    /**
     *
     * @type {BesuPrivateTransactionConfig}
     * @memberof RunTransactionRequest
     */
    'privateTransactionConfig'?: BesuPrivateTransactionConfig;
}
/**
 *
 * @export
 * @interface RunTransactionResponse
 */
export interface RunTransactionResponse {
    /**
     *
     * @type {Web3TransactionReceipt}
     * @memberof RunTransactionResponse
     */
    'transactionReceipt': Web3TransactionReceipt;
}
/**
 *
 * @export
 * @interface SignTransactionRequest
 */
export interface SignTransactionRequest {
    /**
     *
     * @type {string}
     * @memberof SignTransactionRequest
     */
    'keychainId': string;
    /**
     *
     * @type {string}
     * @memberof SignTransactionRequest
     */
    'keychainRef': string;
    /**
     * The transaction hash of ledger will be used to fetch the contain.
     * @type {string}
     * @memberof SignTransactionRequest
     */
    'transactionHash': string;
}
/**
 *
 * @export
 * @interface SignTransactionResponse
 */
export interface SignTransactionResponse {
    /**
     * The signatures of ledger from the corresponding transaction hash.
     * @type {string}
     * @memberof SignTransactionResponse
     */
    'signature': string;
}
/**
 *
 * @export
 * @interface SolidityContractJsonArtifact
 */
export interface SolidityContractJsonArtifact {
    /**
     *
     * @type {string}
     * @memberof SolidityContractJsonArtifact
     */
    'contractName': string;
    /**
     *
     * @type {string}
     * @memberof SolidityContractJsonArtifact
     */
    'metadata'?: string;
    /**
     *
     * @type {string}
     * @memberof SolidityContractJsonArtifact
     */
    'bytecode'?: string;
    /**
     *
     * @type {string}
     * @memberof SolidityContractJsonArtifact
     */
    'deployedBytecode'?: string;
    /**
     *
     * @type {string}
     * @memberof SolidityContractJsonArtifact
     */
    'sourceMap'?: string;
    /**
     *
     * @type {string}
     * @memberof SolidityContractJsonArtifact
     */
    'deployedSourceMap'?: string;
    /**
     *
     * @type {string}
     * @memberof SolidityContractJsonArtifact
     */
    'sourcePath'?: string;
    /**
     *
     * @type {SolidityContractJsonArtifactCompiler}
     * @memberof SolidityContractJsonArtifact
     */
    'compiler'?: SolidityContractJsonArtifactCompiler;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof SolidityContractJsonArtifact
     */
    'functionHashes'?: {
        [key: string]: any;
    };
    /**
     *
     * @type {SolidityContractJsonArtifactGasEstimates}
     * @memberof SolidityContractJsonArtifact
     */
    'gasEstimates'?: SolidityContractJsonArtifactGasEstimates;
}
/**
 *
 * @export
 * @interface SolidityContractJsonArtifactCompiler
 */
export interface SolidityContractJsonArtifactCompiler {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof SolidityContractJsonArtifactCompiler
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof SolidityContractJsonArtifactCompiler
     */
    'version'?: string;
}
/**
 *
 * @export
 * @interface SolidityContractJsonArtifactGasEstimates
 */
export interface SolidityContractJsonArtifactGasEstimates {
    /**
     *
     * @type {SolidityContractJsonArtifactGasEstimatesCreation}
     * @memberof SolidityContractJsonArtifactGasEstimates
     */
    'creation'?: SolidityContractJsonArtifactGasEstimatesCreation;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof SolidityContractJsonArtifactGasEstimates
     */
    'external'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface SolidityContractJsonArtifactGasEstimatesCreation
 */
export interface SolidityContractJsonArtifactGasEstimatesCreation {
    /**
     *
     * @type {string}
     * @memberof SolidityContractJsonArtifactGasEstimatesCreation
     */
    'codeDepositCost'?: string;
    /**
     *
     * @type {string}
     * @memberof SolidityContractJsonArtifactGasEstimatesCreation
     */
    'executionCost'?: string;
    /**
     *
     * @type {string}
     * @memberof SolidityContractJsonArtifactGasEstimatesCreation
     */
    'totalCost'?: string;
}
/**
 *
 * @export
 * @interface ViemV2242EventLog
 */
export interface ViemV2242EventLog {
    /**
     * The address of the contract that emitted the log. Contains a 0x prefix.
     * @type {string}
     * @memberof ViemV2242EventLog
     */
    'address': string;
    /**
     * The arguments provided to the Solidity event\'s constructor at the time of the emission of the event. Note that BigInt values within this object will get serialized into strings during transport because JSON cannot handle BigInts natively.
     * @type {object}
     * @memberof ViemV2242EventLog
     */
    'args': object;
    /**
     * The block hash as a 0x prefixed HEX string.
     * @type {string}
     * @memberof ViemV2242EventLog
     */
    'blockHash': string;
    /**
     * The block number. Originally provided as a BigInt by the underlying implementation but serialized to a string to avoid data integrity issues during transport since JSON can only handle the old Javascript number type and nothing bigger than that.
     * @type {string}
     * @memberof ViemV2242EventLog
     */
    'blockNumber': string;
    /**
     * The log data as a 0x prefixed HEX string.
     * @type {string}
     * @memberof ViemV2242EventLog
     */
    'data': string;
    /**
     * The case-sensitive name of the Solidity event type that was emitted on-chain.
     * @type {string}
     * @memberof ViemV2242EventLog
     */
    'eventName': string;
    /**
     * The log index within the block.
     * @type {number}
     * @memberof ViemV2242EventLog
     */
    'logIndex': number;
    /**
     *
     * @type {boolean}
     * @memberof ViemV2242EventLog
     */
    'removed': boolean;
    /**
     * An array of log topics represented as 0x prefixed HEX strings.
     * @type {Array<string>}
     * @memberof ViemV2242EventLog
     */
    'topics': Array<string>;
    /**
     * The 0x prefixed transaction hash HEX string.
     * @type {string}
     * @memberof ViemV2242EventLog
     */
    'transactionHash': string;
    /**
     * The transaction index within the block.
     * @type {number}
     * @memberof ViemV2242EventLog
     */
    'transactionIndex': number;
}
/**
 * The event log as provided by the Web3 v1.6.1 library.
 * @export
 * @interface ViemV2242WatchEventsV1Progress
 */
export interface ViemV2242WatchEventsV1Progress {
    /**
     * A unique identifier for the request that originated this event.
     * @type {string}
     * @memberof ViemV2242WatchEventsV1Progress
     */
    'requestId': string;
    /**
     *
     * @type {Array<ViemV2242EventLog>}
     * @memberof ViemV2242WatchEventsV1Progress
     */
    'logs'?: Array<ViemV2242EventLog>;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const WatchBlocksV1: {
    readonly Subscribe: "org.hyperledger.cactus.api.async.besu.WatchBlocksV1.Subscribe";
    readonly Next: "org.hyperledger.cactus.api.async.besu.WatchBlocksV1.Next";
    readonly Unsubscribe: "org.hyperledger.cactus.api.async.besu.WatchBlocksV1.Unsubscribe";
    readonly Error: "org.hyperledger.cactus.api.async.besu.WatchBlocksV1.Error";
    readonly Complete: "org.hyperledger.cactus.api.async.besu.WatchBlocksV1.Complete";
};
export type WatchBlocksV1 = typeof WatchBlocksV1[keyof typeof WatchBlocksV1];
/**
 *
 * @export
 * @interface WatchBlocksV1Progress
 */
export interface WatchBlocksV1Progress {
    /**
     *
     * @type {Web3BlockHeader}
     * @memberof WatchBlocksV1Progress
     */
    'blockHeader': Web3BlockHeader;
}
/**
 *
 * @export
 * @interface WatchBlocksV1Request
 */
export interface WatchBlocksV1Request {
    /**
     *
     * @type {WatchBlocksV1}
     * @memberof WatchBlocksV1Request
     */
    'event': WatchBlocksV1;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const WatchEventsV1: {
    readonly Subscribe: "org.lfdecentralizedtrust.cacti.api.async.besu.WatchEventsV1.Subscribe";
    readonly Next: "org.lfdecentralizedtrust.cacti.api.async.besu.WatchEventsV1.Next";
    readonly Unsubscribe: "org.lfdecentralizedtrust.cacti.api.async.besu.WatchEventsV1.Unsubscribe";
    readonly Error: "org.lfdecentralizedtrust.cacti.api.async.besu.WatchEventsV1.Error";
    readonly Complete: "org.lfdecentralizedtrust.cacti.api.async.besu.WatchEventsV1.Complete";
};
export type WatchEventsV1 = typeof WatchEventsV1[keyof typeof WatchEventsV1];
/**
 *
 * @export
 * @interface WatchEventsV1Request
 */
export interface WatchEventsV1Request {
    /**
     * A unique identifier for this request.
     * @type {string}
     * @memberof WatchEventsV1Request
     */
    'requestId': string;
    /**
     *
     * @type {Array<object>}
     * @memberof WatchEventsV1Request
     */
    'abi': Array<object>;
    /**
     * Timeout for socket acknowledgment in milliseconds.
     * @type {number}
     * @memberof WatchEventsV1Request
     */
    'socketAckTimeoutMs'?: number;
    /**
     * Address of the contract to watch for events.
     * @type {string}
     * @memberof WatchEventsV1Request
     */
    'address'?: string;
    /**
     *
     * @type {string}
     * @memberof WatchEventsV1Request
     */
    'eventName'?: string;
    /**
     * The number of the block from which to start watching the events.
     * @type {string}
     * @memberof WatchEventsV1Request
     */
    'fromBlock'?: string;
}
/**
 *
 * @export
 * @interface Web3BlockHeader
 */
export interface Web3BlockHeader {
    /**
     *
     * @type {number}
     * @memberof Web3BlockHeader
     */
    'number': number;
    /**
     *
     * @type {string}
     * @memberof Web3BlockHeader
     */
    'hash': string;
    /**
     *
     * @type {string}
     * @memberof Web3BlockHeader
     */
    'parentHash': string;
    /**
     *
     * @type {string}
     * @memberof Web3BlockHeader
     */
    'nonce': string;
    /**
     *
     * @type {string}
     * @memberof Web3BlockHeader
     */
    'sha3Uncles': string;
    /**
     *
     * @type {string}
     * @memberof Web3BlockHeader
     */
    'logsBloom': string;
    /**
     *
     * @type {string}
     * @memberof Web3BlockHeader
     */
    'transactionRoot': string;
    /**
     *
     * @type {string}
     * @memberof Web3BlockHeader
     */
    'stateRoot': string;
    /**
     *
     * @type {string}
     * @memberof Web3BlockHeader
     */
    'receiptRoot': string;
    /**
     *
     * @type {string}
     * @memberof Web3BlockHeader
     */
    'miner': string;
    /**
     *
     * @type {string}
     * @memberof Web3BlockHeader
     */
    'extraData': string;
    /**
     *
     * @type {number}
     * @memberof Web3BlockHeader
     */
    'gasLimit': number;
    /**
     *
     * @type {number}
     * @memberof Web3BlockHeader
     */
    'gasUsed': number;
    /**
     *
     * @type {Web3BlockHeaderTimestamp}
     * @memberof Web3BlockHeader
     */
    'timestamp': Web3BlockHeaderTimestamp;
}
/**
 * @type Web3BlockHeaderTimestamp
 * @export
 */
export type Web3BlockHeaderTimestamp = number | string;
/**
 * @type Web3SigningCredential
 * @export
 */
export type Web3SigningCredential = Web3SigningCredentialCactusKeychainRef | Web3SigningCredentialNone | Web3SigningCredentialPrivateKeyHex;
/**
 *
 * @export
 * @interface Web3SigningCredentialCactusKeychainRef
 */
export interface Web3SigningCredentialCactusKeychainRef {
    /**
     *
     * @type {Web3SigningCredentialType}
     * @memberof Web3SigningCredentialCactusKeychainRef
     */
    'type': Web3SigningCredentialType;
    /**
     * The ethereum account (public key) that the credential  belongs to. Basically the username in the traditional  terminology of authentication.
     * @type {string}
     * @memberof Web3SigningCredentialCactusKeychainRef
     */
    'ethAccount': string;
    /**
     * The key to use when looking up the the keychain entry holding the secret pointed to by the  keychainEntryKey parameter.
     * @type {string}
     * @memberof Web3SigningCredentialCactusKeychainRef
     */
    'keychainEntryKey': string;
    /**
     * The keychain ID to use when looking up the the keychain plugin instance that will be used to retrieve the secret pointed to by the keychainEntryKey parameter.
     * @type {string}
     * @memberof Web3SigningCredentialCactusKeychainRef
     */
    'keychainId': string;
}
/**
 * Using this denotes that there is no signing required because the transaction is pre-signed.
 * @export
 * @interface Web3SigningCredentialNone
 */
export interface Web3SigningCredentialNone {
    /**
     *
     * @type {Web3SigningCredentialType}
     * @memberof Web3SigningCredentialNone
     */
    'type': Web3SigningCredentialType;
}
/**
 *
 * @export
 * @interface Web3SigningCredentialPrivateKeyHex
 */
export interface Web3SigningCredentialPrivateKeyHex {
    /**
     *
     * @type {Web3SigningCredentialType}
     * @memberof Web3SigningCredentialPrivateKeyHex
     */
    'type': Web3SigningCredentialType;
    /**
     * The ethereum account (public key) that the credential belongs to. Basically the username in the traditional terminology of authentication.
     * @type {string}
     * @memberof Web3SigningCredentialPrivateKeyHex
     */
    'ethAccount': string;
    /**
     * The HEX encoded private key of an eth account.
     * @type {string}
     * @memberof Web3SigningCredentialPrivateKeyHex
     */
    'secret': string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const Web3SigningCredentialType: {
    readonly CactusKeychainRef: "CACTUS_KEYCHAIN_REF";
    readonly GethKeychainPassword: "GETH_KEYCHAIN_PASSWORD";
    readonly PrivateKeyHex: "PRIVATE_KEY_HEX";
    readonly None: "NONE";
};
export type Web3SigningCredentialType = typeof Web3SigningCredentialType[keyof typeof Web3SigningCredentialType];
/**
 *
 * @export
 * @interface Web3TransactionReceipt
 */
export interface Web3TransactionReceipt {
    [key: string]: any;
    /**
     *
     * @type {boolean}
     * @memberof Web3TransactionReceipt
     */
    'status': boolean;
    /**
     *
     * @type {string}
     * @memberof Web3TransactionReceipt
     */
    'transactionHash': string;
    /**
     *
     * @type {number}
     * @memberof Web3TransactionReceipt
     */
    'transactionIndex': number;
    /**
     *
     * @type {string}
     * @memberof Web3TransactionReceipt
     */
    'blockHash': string;
    /**
     *
     * @type {number}
     * @memberof Web3TransactionReceipt
     */
    'blockNumber': number;
    /**
     *
     * @type {number}
     * @memberof Web3TransactionReceipt
     */
    'gasUsed': number;
    /**
     *
     * @type {string}
     * @memberof Web3TransactionReceipt
     */
    'contractAddress'?: string | null;
    /**
     *
     * @type {string}
     * @memberof Web3TransactionReceipt
     */
    'from': string;
    /**
     *
     * @type {string}
     * @memberof Web3TransactionReceipt
     */
    'to': string;
}
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export declare const DefaultApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Deploys the bytecode of a Solidity contract without the need of keychain
     * @param {DeployContractSolidityBytecodeNoKeychainV1Request} [deployContractSolidityBytecodeNoKeychainV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deployContractSolBytecodeNoKeychainV1: (deployContractSolidityBytecodeNoKeychainV1Request?: DeployContractSolidityBytecodeNoKeychainV1Request, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Deploys the bytecode of a Solidity contract.
     * @param {DeployContractSolidityBytecodeV1Request} [deployContractSolidityBytecodeV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deployContractSolBytecodeV1: (deployContractSolidityBytecodeV1Request?: DeployContractSolidityBytecodeV1Request, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Return balance of an address of a given block
     * @param {GetBalanceV1Request} [getBalanceV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBalanceV1: (getBalanceV1Request?: GetBalanceV1Request, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves an arbitrary record (any piece of information) from the ledger. Ledger records can be call outputs, transaction input, etc.
     * @param {GetBesuRecordV1Request} [getBesuRecordV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBesuRecordV1: (getBesuRecordV1Request?: GetBesuRecordV1Request, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Returns a block matching the block
     * @param {GetBlockV1Request} [getBlockV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockV1: (getBlockV1Request?: GetBlockV1Request, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves the .json file that contains the OpenAPI specification for the plugin.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOpenApiSpecV1: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Gets past logs, matching the given options.
     * @param {GetPastLogsV1Request} [getPastLogsV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPastLogsV1: (getPastLogsV1Request?: GetPastLogsV1Request, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get the Prometheus Metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPrometheusMetricsV1: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Executes a transaction on a besu ledger
     * @param {GetTransactionV1Request} [getTransactionV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionV1: (getTransactionV1Request?: GetTransactionV1Request, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Invokes a contract on a besu ledger
     * @param {InvokeContractV1Request} [invokeContractV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeContractV1: (invokeContractV1Request?: InvokeContractV1Request, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Executes a transaction on a besu ledger
     * @param {RunTransactionRequest} [runTransactionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runTransactionV1: (runTransactionRequest?: RunTransactionRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Obtain signatures of ledger from the corresponding transaction hash.
     * @summary Obtain signatures of ledger from the corresponding transaction hash.
     * @param {SignTransactionRequest} signTransactionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signTransactionV1: (signTransactionRequest: SignTransactionRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export declare const DefaultApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Deploys the bytecode of a Solidity contract without the need of keychain
     * @param {DeployContractSolidityBytecodeNoKeychainV1Request} [deployContractSolidityBytecodeNoKeychainV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deployContractSolBytecodeNoKeychainV1(deployContractSolidityBytecodeNoKeychainV1Request?: DeployContractSolidityBytecodeNoKeychainV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeployContractSolidityBytecodeV1Response>>;
    /**
     *
     * @summary Deploys the bytecode of a Solidity contract.
     * @param {DeployContractSolidityBytecodeV1Request} [deployContractSolidityBytecodeV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deployContractSolBytecodeV1(deployContractSolidityBytecodeV1Request?: DeployContractSolidityBytecodeV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeployContractSolidityBytecodeV1Response>>;
    /**
     *
     * @summary Return balance of an address of a given block
     * @param {GetBalanceV1Request} [getBalanceV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBalanceV1(getBalanceV1Request?: GetBalanceV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBalanceV1Response>>;
    /**
     *
     * @summary Retrieves an arbitrary record (any piece of information) from the ledger. Ledger records can be call outputs, transaction input, etc.
     * @param {GetBesuRecordV1Request} [getBesuRecordV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBesuRecordV1(getBesuRecordV1Request?: GetBesuRecordV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBesuRecordV1Response>>;
    /**
     *
     * @summary Returns a block matching the block
     * @param {GetBlockV1Request} [getBlockV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockV1(getBlockV1Request?: GetBlockV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBlockV1Response>>;
    /**
     *
     * @summary Retrieves the .json file that contains the OpenAPI specification for the plugin.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOpenApiSpecV1(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Gets past logs, matching the given options.
     * @param {GetPastLogsV1Request} [getPastLogsV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPastLogsV1(getPastLogsV1Request?: GetPastLogsV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPastLogsV1Response>>;
    /**
     *
     * @summary Get the Prometheus Metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPrometheusMetricsV1(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Executes a transaction on a besu ledger
     * @param {GetTransactionV1Request} [getTransactionV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionV1(getTransactionV1Request?: GetTransactionV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTransactionV1Response>>;
    /**
     *
     * @summary Invokes a contract on a besu ledger
     * @param {InvokeContractV1Request} [invokeContractV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeContractV1(invokeContractV1Request?: InvokeContractV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvokeContractV1Response>>;
    /**
     *
     * @summary Executes a transaction on a besu ledger
     * @param {RunTransactionRequest} [runTransactionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runTransactionV1(runTransactionRequest?: RunTransactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunTransactionResponse>>;
    /**
     * Obtain signatures of ledger from the corresponding transaction hash.
     * @summary Obtain signatures of ledger from the corresponding transaction hash.
     * @param {SignTransactionRequest} signTransactionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signTransactionV1(signTransactionRequest: SignTransactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignTransactionResponse>>;
};
/**
 * DefaultApi - factory interface
 * @export
 */
export declare const DefaultApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Deploys the bytecode of a Solidity contract without the need of keychain
     * @param {DeployContractSolidityBytecodeNoKeychainV1Request} [deployContractSolidityBytecodeNoKeychainV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deployContractSolBytecodeNoKeychainV1(deployContractSolidityBytecodeNoKeychainV1Request?: DeployContractSolidityBytecodeNoKeychainV1Request, options?: any): AxiosPromise<DeployContractSolidityBytecodeV1Response>;
    /**
     *
     * @summary Deploys the bytecode of a Solidity contract.
     * @param {DeployContractSolidityBytecodeV1Request} [deployContractSolidityBytecodeV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deployContractSolBytecodeV1(deployContractSolidityBytecodeV1Request?: DeployContractSolidityBytecodeV1Request, options?: any): AxiosPromise<DeployContractSolidityBytecodeV1Response>;
    /**
     *
     * @summary Return balance of an address of a given block
     * @param {GetBalanceV1Request} [getBalanceV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBalanceV1(getBalanceV1Request?: GetBalanceV1Request, options?: any): AxiosPromise<GetBalanceV1Response>;
    /**
     *
     * @summary Retrieves an arbitrary record (any piece of information) from the ledger. Ledger records can be call outputs, transaction input, etc.
     * @param {GetBesuRecordV1Request} [getBesuRecordV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBesuRecordV1(getBesuRecordV1Request?: GetBesuRecordV1Request, options?: any): AxiosPromise<GetBesuRecordV1Response>;
    /**
     *
     * @summary Returns a block matching the block
     * @param {GetBlockV1Request} [getBlockV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockV1(getBlockV1Request?: GetBlockV1Request, options?: any): AxiosPromise<GetBlockV1Response>;
    /**
     *
     * @summary Retrieves the .json file that contains the OpenAPI specification for the plugin.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOpenApiSpecV1(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Gets past logs, matching the given options.
     * @param {GetPastLogsV1Request} [getPastLogsV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPastLogsV1(getPastLogsV1Request?: GetPastLogsV1Request, options?: any): AxiosPromise<GetPastLogsV1Response>;
    /**
     *
     * @summary Get the Prometheus Metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPrometheusMetricsV1(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Executes a transaction on a besu ledger
     * @param {GetTransactionV1Request} [getTransactionV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionV1(getTransactionV1Request?: GetTransactionV1Request, options?: any): AxiosPromise<GetTransactionV1Response>;
    /**
     *
     * @summary Invokes a contract on a besu ledger
     * @param {InvokeContractV1Request} [invokeContractV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invokeContractV1(invokeContractV1Request?: InvokeContractV1Request, options?: any): AxiosPromise<InvokeContractV1Response>;
    /**
     *
     * @summary Executes a transaction on a besu ledger
     * @param {RunTransactionRequest} [runTransactionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runTransactionV1(runTransactionRequest?: RunTransactionRequest, options?: any): AxiosPromise<RunTransactionResponse>;
    /**
     * Obtain signatures of ledger from the corresponding transaction hash.
     * @summary Obtain signatures of ledger from the corresponding transaction hash.
     * @param {SignTransactionRequest} signTransactionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signTransactionV1(signTransactionRequest: SignTransactionRequest, options?: any): AxiosPromise<SignTransactionResponse>;
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export declare class DefaultApi extends BaseAPI {
    /**
     *
     * @summary Deploys the bytecode of a Solidity contract without the need of keychain
     * @param {DeployContractSolidityBytecodeNoKeychainV1Request} [deployContractSolidityBytecodeNoKeychainV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deployContractSolBytecodeNoKeychainV1(deployContractSolidityBytecodeNoKeychainV1Request?: DeployContractSolidityBytecodeNoKeychainV1Request, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeployContractSolidityBytecodeV1Response, any>>;
    /**
     *
     * @summary Deploys the bytecode of a Solidity contract.
     * @param {DeployContractSolidityBytecodeV1Request} [deployContractSolidityBytecodeV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deployContractSolBytecodeV1(deployContractSolidityBytecodeV1Request?: DeployContractSolidityBytecodeV1Request, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeployContractSolidityBytecodeV1Response, any>>;
    /**
     *
     * @summary Return balance of an address of a given block
     * @param {GetBalanceV1Request} [getBalanceV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getBalanceV1(getBalanceV1Request?: GetBalanceV1Request, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetBalanceV1Response, any>>;
    /**
     *
     * @summary Retrieves an arbitrary record (any piece of information) from the ledger. Ledger records can be call outputs, transaction input, etc.
     * @param {GetBesuRecordV1Request} [getBesuRecordV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getBesuRecordV1(getBesuRecordV1Request?: GetBesuRecordV1Request, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetBesuRecordV1Response, any>>;
    /**
     *
     * @summary Returns a block matching the block
     * @param {GetBlockV1Request} [getBlockV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getBlockV1(getBlockV1Request?: GetBlockV1Request, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetBlockV1Response, any>>;
    /**
     *
     * @summary Retrieves the .json file that contains the OpenAPI specification for the plugin.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getOpenApiSpecV1(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     *
     * @summary Gets past logs, matching the given options.
     * @param {GetPastLogsV1Request} [getPastLogsV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getPastLogsV1(getPastLogsV1Request?: GetPastLogsV1Request, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetPastLogsV1Response, any>>;
    /**
     *
     * @summary Get the Prometheus Metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getPrometheusMetricsV1(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     *
     * @summary Executes a transaction on a besu ledger
     * @param {GetTransactionV1Request} [getTransactionV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getTransactionV1(getTransactionV1Request?: GetTransactionV1Request, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetTransactionV1Response, any>>;
    /**
     *
     * @summary Invokes a contract on a besu ledger
     * @param {InvokeContractV1Request} [invokeContractV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    invokeContractV1(invokeContractV1Request?: InvokeContractV1Request, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InvokeContractV1Response, any>>;
    /**
     *
     * @summary Executes a transaction on a besu ledger
     * @param {RunTransactionRequest} [runTransactionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    runTransactionV1(runTransactionRequest?: RunTransactionRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RunTransactionResponse, any>>;
    /**
     * Obtain signatures of ledger from the corresponding transaction hash.
     * @summary Obtain signatures of ledger from the corresponding transaction hash.
     * @param {SignTransactionRequest} signTransactionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    signTransactionV1(signTransactionRequest: SignTransactionRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SignTransactionResponse, any>>;
}
