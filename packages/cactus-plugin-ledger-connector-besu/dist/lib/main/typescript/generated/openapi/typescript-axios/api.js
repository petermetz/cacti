"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Hyperledger Cacti Plugin - Besu Connector
 * Can perform basic tasks on a Besu ledger such as executing transactions, streaming blocks or solidity smart contract events.
 *
 * The version of the OpenAPI document: 2.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultApi = exports.DefaultApiFactory = exports.DefaultApiFp = exports.DefaultApiAxiosParamCreator = exports.Web3SigningCredentialType = exports.WatchEventsV1 = exports.WatchBlocksV1 = exports.ReceiptType = exports.EthContractInvocationType = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 *
 * @export
 * @enum {string}
 */
exports.EthContractInvocationType = {
    Send: 'SEND',
    Call: 'CALL'
};
/**
 * Enumerates the possible types of receipts that can be waited for by someone or something that has requested the execution of a transaction on a ledger.
 * @export
 * @enum {string}
 */
exports.ReceiptType = {
    NodeTxPoolAck: 'NODE_TX_POOL_ACK',
    LedgerBlockAck: 'LEDGER_BLOCK_ACK'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.WatchBlocksV1 = {
    Subscribe: 'org.hyperledger.cactus.api.async.besu.WatchBlocksV1.Subscribe',
    Next: 'org.hyperledger.cactus.api.async.besu.WatchBlocksV1.Next',
    Unsubscribe: 'org.hyperledger.cactus.api.async.besu.WatchBlocksV1.Unsubscribe',
    Error: 'org.hyperledger.cactus.api.async.besu.WatchBlocksV1.Error',
    Complete: 'org.hyperledger.cactus.api.async.besu.WatchBlocksV1.Complete'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.WatchEventsV1 = {
    Subscribe: 'org.lfdecentralizedtrust.cacti.api.async.besu.WatchEventsV1.Subscribe',
    Next: 'org.lfdecentralizedtrust.cacti.api.async.besu.WatchEventsV1.Next',
    Unsubscribe: 'org.lfdecentralizedtrust.cacti.api.async.besu.WatchEventsV1.Unsubscribe',
    Error: 'org.lfdecentralizedtrust.cacti.api.async.besu.WatchEventsV1.Error',
    Complete: 'org.lfdecentralizedtrust.cacti.api.async.besu.WatchEventsV1.Complete'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.Web3SigningCredentialType = {
    CactusKeychainRef: 'CACTUS_KEYCHAIN_REF',
    GethKeychainPassword: 'GETH_KEYCHAIN_PASSWORD',
    PrivateKeyHex: 'PRIVATE_KEY_HEX',
    None: 'NONE'
};
/**
 * DefaultApi - axios parameter creator
 * @export
 */
const DefaultApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Deploys the bytecode of a Solidity contract without the need of keychain
         * @param {DeployContractSolidityBytecodeNoKeychainV1Request} [deployContractSolidityBytecodeNoKeychainV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployContractSolBytecodeNoKeychainV1: async (deployContractSolidityBytecodeNoKeychainV1Request, options = {}) => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/deploy-contract-solidity-bytecode-no-keychain`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(deployContractSolidityBytecodeNoKeychainV1Request, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deploys the bytecode of a Solidity contract.
         * @param {DeployContractSolidityBytecodeV1Request} [deployContractSolidityBytecodeV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployContractSolBytecodeV1: async (deployContractSolidityBytecodeV1Request, options = {}) => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/deploy-contract-solidity-bytecode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(deployContractSolidityBytecodeV1Request, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Return balance of an address of a given block
         * @param {GetBalanceV1Request} [getBalanceV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBalanceV1: async (getBalanceV1Request, options = {}) => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/get-balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getBalanceV1Request, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Retrieves an arbitrary record (any piece of information) from the ledger. Ledger records can be call outputs, transaction input, etc.
         * @param {GetBesuRecordV1Request} [getBesuRecordV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBesuRecordV1: async (getBesuRecordV1Request, options = {}) => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/get-besu-record`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getBesuRecordV1Request, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Returns a block matching the block
         * @param {GetBlockV1Request} [getBlockV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockV1: async (getBlockV1Request, options = {}) => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/get-block`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getBlockV1Request, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Retrieves the .json file that contains the OpenAPI specification for the plugin.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenApiSpecV1: async (options = {}) => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/get-open-api-spec`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Gets past logs, matching the given options.
         * @param {GetPastLogsV1Request} [getPastLogsV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPastLogsV1: async (getPastLogsV1Request, options = {}) => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/get-past-logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getPastLogsV1Request, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get the Prometheus Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrometheusMetricsV1: async (options = {}) => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/get-prometheus-exporter-metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Executes a transaction on a besu ledger
         * @param {GetTransactionV1Request} [getTransactionV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionV1: async (getTransactionV1Request, options = {}) => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/get-transaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(getTransactionV1Request, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Invokes a contract on a besu ledger
         * @param {InvokeContractV1Request} [invokeContractV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeContractV1: async (invokeContractV1Request, options = {}) => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/invoke-contract`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(invokeContractV1Request, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Executes a transaction on a besu ledger
         * @param {RunTransactionRequest} [runTransactionRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runTransactionV1: async (runTransactionRequest, options = {}) => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/run-transaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(runTransactionRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Obtain signatures of ledger from the corresponding transaction hash.
         * @summary Obtain signatures of ledger from the corresponding transaction hash.
         * @param {SignTransactionRequest} signTransactionRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signTransactionV1: async (signTransactionRequest, options = {}) => {
            // verify required parameter 'signTransactionRequest' is not null or undefined
            (0, common_1.assertParamExists)('signTransactionV1', 'signTransactionRequest', signTransactionRequest);
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/sign-transaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(signTransactionRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.DefaultApiAxiosParamCreator = DefaultApiAxiosParamCreator;
/**
 * DefaultApi - functional programming interface
 * @export
 */
const DefaultApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.DefaultApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Deploys the bytecode of a Solidity contract without the need of keychain
         * @param {DeployContractSolidityBytecodeNoKeychainV1Request} [deployContractSolidityBytecodeNoKeychainV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deployContractSolBytecodeNoKeychainV1(deployContractSolidityBytecodeNoKeychainV1Request, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deployContractSolBytecodeNoKeychainV1(deployContractSolidityBytecodeNoKeychainV1Request, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Deploys the bytecode of a Solidity contract.
         * @param {DeployContractSolidityBytecodeV1Request} [deployContractSolidityBytecodeV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deployContractSolBytecodeV1(deployContractSolidityBytecodeV1Request, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deployContractSolBytecodeV1(deployContractSolidityBytecodeV1Request, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Return balance of an address of a given block
         * @param {GetBalanceV1Request} [getBalanceV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBalanceV1(getBalanceV1Request, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBalanceV1(getBalanceV1Request, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Retrieves an arbitrary record (any piece of information) from the ledger. Ledger records can be call outputs, transaction input, etc.
         * @param {GetBesuRecordV1Request} [getBesuRecordV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBesuRecordV1(getBesuRecordV1Request, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBesuRecordV1(getBesuRecordV1Request, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Returns a block matching the block
         * @param {GetBlockV1Request} [getBlockV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlockV1(getBlockV1Request, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBlockV1(getBlockV1Request, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Retrieves the .json file that contains the OpenAPI specification for the plugin.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOpenApiSpecV1(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOpenApiSpecV1(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Gets past logs, matching the given options.
         * @param {GetPastLogsV1Request} [getPastLogsV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPastLogsV1(getPastLogsV1Request, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPastLogsV1(getPastLogsV1Request, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get the Prometheus Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrometheusMetricsV1(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrometheusMetricsV1(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Executes a transaction on a besu ledger
         * @param {GetTransactionV1Request} [getTransactionV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransactionV1(getTransactionV1Request, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransactionV1(getTransactionV1Request, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Invokes a contract on a besu ledger
         * @param {InvokeContractV1Request} [invokeContractV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invokeContractV1(invokeContractV1Request, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invokeContractV1(invokeContractV1Request, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Executes a transaction on a besu ledger
         * @param {RunTransactionRequest} [runTransactionRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runTransactionV1(runTransactionRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runTransactionV1(runTransactionRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Obtain signatures of ledger from the corresponding transaction hash.
         * @summary Obtain signatures of ledger from the corresponding transaction hash.
         * @param {SignTransactionRequest} signTransactionRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signTransactionV1(signTransactionRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signTransactionV1(signTransactionRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.DefaultApiFp = DefaultApiFp;
/**
 * DefaultApi - factory interface
 * @export
 */
const DefaultApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.DefaultApiFp)(configuration);
    return {
        /**
         *
         * @summary Deploys the bytecode of a Solidity contract without the need of keychain
         * @param {DeployContractSolidityBytecodeNoKeychainV1Request} [deployContractSolidityBytecodeNoKeychainV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployContractSolBytecodeNoKeychainV1(deployContractSolidityBytecodeNoKeychainV1Request, options) {
            return localVarFp.deployContractSolBytecodeNoKeychainV1(deployContractSolidityBytecodeNoKeychainV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deploys the bytecode of a Solidity contract.
         * @param {DeployContractSolidityBytecodeV1Request} [deployContractSolidityBytecodeV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployContractSolBytecodeV1(deployContractSolidityBytecodeV1Request, options) {
            return localVarFp.deployContractSolBytecodeV1(deployContractSolidityBytecodeV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Return balance of an address of a given block
         * @param {GetBalanceV1Request} [getBalanceV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBalanceV1(getBalanceV1Request, options) {
            return localVarFp.getBalanceV1(getBalanceV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves an arbitrary record (any piece of information) from the ledger. Ledger records can be call outputs, transaction input, etc.
         * @param {GetBesuRecordV1Request} [getBesuRecordV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBesuRecordV1(getBesuRecordV1Request, options) {
            return localVarFp.getBesuRecordV1(getBesuRecordV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Returns a block matching the block
         * @param {GetBlockV1Request} [getBlockV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockV1(getBlockV1Request, options) {
            return localVarFp.getBlockV1(getBlockV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves the .json file that contains the OpenAPI specification for the plugin.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenApiSpecV1(options) {
            return localVarFp.getOpenApiSpecV1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets past logs, matching the given options.
         * @param {GetPastLogsV1Request} [getPastLogsV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPastLogsV1(getPastLogsV1Request, options) {
            return localVarFp.getPastLogsV1(getPastLogsV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get the Prometheus Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrometheusMetricsV1(options) {
            return localVarFp.getPrometheusMetricsV1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Executes a transaction on a besu ledger
         * @param {GetTransactionV1Request} [getTransactionV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionV1(getTransactionV1Request, options) {
            return localVarFp.getTransactionV1(getTransactionV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Invokes a contract on a besu ledger
         * @param {InvokeContractV1Request} [invokeContractV1Request]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeContractV1(invokeContractV1Request, options) {
            return localVarFp.invokeContractV1(invokeContractV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Executes a transaction on a besu ledger
         * @param {RunTransactionRequest} [runTransactionRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runTransactionV1(runTransactionRequest, options) {
            return localVarFp.runTransactionV1(runTransactionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Obtain signatures of ledger from the corresponding transaction hash.
         * @summary Obtain signatures of ledger from the corresponding transaction hash.
         * @param {SignTransactionRequest} signTransactionRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signTransactionV1(signTransactionRequest, options) {
            return localVarFp.signTransactionV1(signTransactionRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.DefaultApiFactory = DefaultApiFactory;
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
class DefaultApi extends base_1.BaseAPI {
    /**
     *
     * @summary Deploys the bytecode of a Solidity contract without the need of keychain
     * @param {DeployContractSolidityBytecodeNoKeychainV1Request} [deployContractSolidityBytecodeNoKeychainV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deployContractSolBytecodeNoKeychainV1(deployContractSolidityBytecodeNoKeychainV1Request, options) {
        return (0, exports.DefaultApiFp)(this.configuration).deployContractSolBytecodeNoKeychainV1(deployContractSolidityBytecodeNoKeychainV1Request, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Deploys the bytecode of a Solidity contract.
     * @param {DeployContractSolidityBytecodeV1Request} [deployContractSolidityBytecodeV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deployContractSolBytecodeV1(deployContractSolidityBytecodeV1Request, options) {
        return (0, exports.DefaultApiFp)(this.configuration).deployContractSolBytecodeV1(deployContractSolidityBytecodeV1Request, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Return balance of an address of a given block
     * @param {GetBalanceV1Request} [getBalanceV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getBalanceV1(getBalanceV1Request, options) {
        return (0, exports.DefaultApiFp)(this.configuration).getBalanceV1(getBalanceV1Request, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves an arbitrary record (any piece of information) from the ledger. Ledger records can be call outputs, transaction input, etc.
     * @param {GetBesuRecordV1Request} [getBesuRecordV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getBesuRecordV1(getBesuRecordV1Request, options) {
        return (0, exports.DefaultApiFp)(this.configuration).getBesuRecordV1(getBesuRecordV1Request, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Returns a block matching the block
     * @param {GetBlockV1Request} [getBlockV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getBlockV1(getBlockV1Request, options) {
        return (0, exports.DefaultApiFp)(this.configuration).getBlockV1(getBlockV1Request, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Retrieves the .json file that contains the OpenAPI specification for the plugin.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getOpenApiSpecV1(options) {
        return (0, exports.DefaultApiFp)(this.configuration).getOpenApiSpecV1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Gets past logs, matching the given options.
     * @param {GetPastLogsV1Request} [getPastLogsV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getPastLogsV1(getPastLogsV1Request, options) {
        return (0, exports.DefaultApiFp)(this.configuration).getPastLogsV1(getPastLogsV1Request, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get the Prometheus Metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getPrometheusMetricsV1(options) {
        return (0, exports.DefaultApiFp)(this.configuration).getPrometheusMetricsV1(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Executes a transaction on a besu ledger
     * @param {GetTransactionV1Request} [getTransactionV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getTransactionV1(getTransactionV1Request, options) {
        return (0, exports.DefaultApiFp)(this.configuration).getTransactionV1(getTransactionV1Request, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Invokes a contract on a besu ledger
     * @param {InvokeContractV1Request} [invokeContractV1Request]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    invokeContractV1(invokeContractV1Request, options) {
        return (0, exports.DefaultApiFp)(this.configuration).invokeContractV1(invokeContractV1Request, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Executes a transaction on a besu ledger
     * @param {RunTransactionRequest} [runTransactionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    runTransactionV1(runTransactionRequest, options) {
        return (0, exports.DefaultApiFp)(this.configuration).runTransactionV1(runTransactionRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Obtain signatures of ledger from the corresponding transaction hash.
     * @summary Obtain signatures of ledger from the corresponding transaction hash.
     * @param {SignTransactionRequest} signTransactionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    signTransactionV1(signTransactionRequest, options) {
        return (0, exports.DefaultApiFp)(this.configuration).signTransactionV1(signTransactionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DefaultApi = DefaultApi;
//# sourceMappingURL=data:application/json;base64,