"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.org = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: models/evm_block_pb.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = __importStar(require("./../google/protobuf/any"));
const pb_1 = __importStar(require("google-protobuf"));
var org;
(function (org) {
    var hyperledger;
    (function (hyperledger) {
        var cacti;
        (function (cacti) {
            var plugin;
            (function (plugin) {
                var ledger;
                (function (ledger) {
                    var connector;
                    (function (connector) {
                        var besu;
                        (function (besu) {
                            class EvmBlockPB extends pb_1.Message {
                                #one_of_decls = [[55126294]];
                                constructor(data) {
                                    super();
                                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [343509336, 303842065], this.#one_of_decls);
                                    if (!Array.isArray(data) && typeof data == "object") {
                                        if ("number" in data && data.number != undefined) {
                                            this.number = data.number;
                                        }
                                        if ("hash" in data && data.hash != undefined) {
                                            this.hash = data.hash;
                                        }
                                        if ("parentHash" in data && data.parentHash != undefined) {
                                            this.parentHash = data.parentHash;
                                        }
                                        if ("nonce" in data && data.nonce != undefined) {
                                            this.nonce = data.nonce;
                                        }
                                        if ("sha3Uncles" in data && data.sha3Uncles != undefined) {
                                            this.sha3Uncles = data.sha3Uncles;
                                        }
                                        if ("logsBloom" in data && data.logsBloom != undefined) {
                                            this.logsBloom = data.logsBloom;
                                        }
                                        if ("transactionsRoot" in data && data.transactionsRoot != undefined) {
                                            this.transactionsRoot = data.transactionsRoot;
                                        }
                                        if ("stateRoot" in data && data.stateRoot != undefined) {
                                            this.stateRoot = data.stateRoot;
                                        }
                                        if ("miner" in data && data.miner != undefined) {
                                            this.miner = data.miner;
                                        }
                                        if ("difficulty" in data && data.difficulty != undefined) {
                                            this.difficulty = data.difficulty;
                                        }
                                        if ("totalDifficulty" in data && data.totalDifficulty != undefined) {
                                            this.totalDifficulty = data.totalDifficulty;
                                        }
                                        if ("extraData" in data && data.extraData != undefined) {
                                            this.extraData = data.extraData;
                                        }
                                        if ("size" in data && data.size != undefined) {
                                            this.size = data.size;
                                        }
                                        if ("gasLimit" in data && data.gasLimit != undefined) {
                                            this.gasLimit = data.gasLimit;
                                        }
                                        if ("gasUsed" in data && data.gasUsed != undefined) {
                                            this.gasUsed = data.gasUsed;
                                        }
                                        if ("timestamp" in data && data.timestamp != undefined) {
                                            this.timestamp = data.timestamp;
                                        }
                                        if ("transactions" in data && data.transactions != undefined) {
                                            this.transactions = data.transactions;
                                        }
                                        if ("uncles" in data && data.uncles != undefined) {
                                            this.uncles = data.uncles;
                                        }
                                    }
                                }
                                get number() {
                                    return pb_1.Message.getFieldWithDefault(this, 497493176, 0);
                                }
                                set number(value) {
                                    pb_1.Message.setField(this, 497493176, value);
                                }
                                get hash() {
                                    return pb_1.Message.getFieldWithDefault(this, 3195150, "");
                                }
                                set hash(value) {
                                    pb_1.Message.setField(this, 3195150, value);
                                }
                                get parentHash() {
                                    return pb_1.Message.getFieldWithDefault(this, 245049128, "");
                                }
                                set parentHash(value) {
                                    pb_1.Message.setField(this, 245049128, value);
                                }
                                get nonce() {
                                    return pb_1.Message.getFieldWithDefault(this, 105002991, "");
                                }
                                set nonce(value) {
                                    pb_1.Message.setField(this, 105002991, value);
                                }
                                get sha3Uncles() {
                                    return pb_1.Message.getFieldWithDefault(this, 373514458, "");
                                }
                                set sha3Uncles(value) {
                                    pb_1.Message.setField(this, 373514458, value);
                                }
                                get logsBloom() {
                                    return pb_1.Message.getFieldWithDefault(this, 399161966, "");
                                }
                                set logsBloom(value) {
                                    pb_1.Message.setField(this, 399161966, value);
                                }
                                get transactionsRoot() {
                                    return pb_1.Message.getFieldWithDefault(this, 526502871, "");
                                }
                                set transactionsRoot(value) {
                                    pb_1.Message.setField(this, 526502871, value);
                                }
                                get stateRoot() {
                                    return pb_1.Message.getFieldWithDefault(this, 475330288, "");
                                }
                                set stateRoot(value) {
                                    pb_1.Message.setField(this, 475330288, value);
                                }
                                get miner() {
                                    return pb_1.Message.getFieldWithDefault(this, 103900799, "");
                                }
                                set miner(value) {
                                    pb_1.Message.setField(this, 103900799, value);
                                }
                                get difficulty() {
                                    return pb_1.Message.getFieldWithDefault(this, 218888126, 0);
                                }
                                set difficulty(value) {
                                    pb_1.Message.setField(this, 218888126, value);
                                }
                                get totalDifficulty() {
                                    return pb_1.Message.getFieldWithDefault(this, 413035041, 0);
                                }
                                set totalDifficulty(value) {
                                    pb_1.Message.setField(this, 413035041, value);
                                }
                                get extraData() {
                                    return pb_1.Message.getFieldWithDefault(this, 253792294, "");
                                }
                                set extraData(value) {
                                    pb_1.Message.setField(this, 253792294, value);
                                }
                                get size() {
                                    return pb_1.Message.getFieldWithDefault(this, 3530753, 0);
                                }
                                set size(value) {
                                    pb_1.Message.setField(this, 3530753, value);
                                }
                                get gasLimit() {
                                    return pb_1.Message.getFieldWithDefault(this, 9229217, 0);
                                }
                                set gasLimit(value) {
                                    pb_1.Message.setField(this, 9229217, value);
                                }
                                get gasUsed() {
                                    return pb_1.Message.getFieldWithDefault(this, 190522826, 0);
                                }
                                set gasUsed(value) {
                                    pb_1.Message.setField(this, 190522826, value);
                                }
                                get timestamp() {
                                    return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Any, 55126294);
                                }
                                set timestamp(value) {
                                    pb_1.Message.setOneofWrapperField(this, 55126294, this.#one_of_decls[0], value);
                                }
                                get has_timestamp() {
                                    return pb_1.Message.getField(this, 55126294) != null;
                                }
                                get transactions() {
                                    return pb_1.Message.getRepeatedWrapperField(this, dependency_1.google.protobuf.Any, 343509336);
                                }
                                set transactions(value) {
                                    pb_1.Message.setRepeatedWrapperField(this, 343509336, value);
                                }
                                get uncles() {
                                    return pb_1.Message.getRepeatedWrapperField(this, dependency_1.google.protobuf.Any, 303842065);
                                }
                                set uncles(value) {
                                    pb_1.Message.setRepeatedWrapperField(this, 303842065, value);
                                }
                                get _timestamp() {
                                    const cases = {
                                        0: "none",
                                        55126294: "timestamp"
                                    };
                                    return cases[pb_1.Message.computeOneofCase(this, [55126294])];
                                }
                                static fromObject(data) {
                                    const message = new EvmBlockPB({});
                                    if (data.number != null) {
                                        message.number = data.number;
                                    }
                                    if (data.hash != null) {
                                        message.hash = data.hash;
                                    }
                                    if (data.parentHash != null) {
                                        message.parentHash = data.parentHash;
                                    }
                                    if (data.nonce != null) {
                                        message.nonce = data.nonce;
                                    }
                                    if (data.sha3Uncles != null) {
                                        message.sha3Uncles = data.sha3Uncles;
                                    }
                                    if (data.logsBloom != null) {
                                        message.logsBloom = data.logsBloom;
                                    }
                                    if (data.transactionsRoot != null) {
                                        message.transactionsRoot = data.transactionsRoot;
                                    }
                                    if (data.stateRoot != null) {
                                        message.stateRoot = data.stateRoot;
                                    }
                                    if (data.miner != null) {
                                        message.miner = data.miner;
                                    }
                                    if (data.difficulty != null) {
                                        message.difficulty = data.difficulty;
                                    }
                                    if (data.totalDifficulty != null) {
                                        message.totalDifficulty = data.totalDifficulty;
                                    }
                                    if (data.extraData != null) {
                                        message.extraData = data.extraData;
                                    }
                                    if (data.size != null) {
                                        message.size = data.size;
                                    }
                                    if (data.gasLimit != null) {
                                        message.gasLimit = data.gasLimit;
                                    }
                                    if (data.gasUsed != null) {
                                        message.gasUsed = data.gasUsed;
                                    }
                                    if (data.timestamp != null) {
                                        message.timestamp = dependency_1.google.protobuf.Any.fromObject(data.timestamp);
                                    }
                                    if (data.transactions != null) {
                                        message.transactions = data.transactions.map(item => dependency_1.google.protobuf.Any.fromObject(item));
                                    }
                                    if (data.uncles != null) {
                                        message.uncles = data.uncles.map(item => dependency_1.google.protobuf.Any.fromObject(item));
                                    }
                                    return message;
                                }
                                toObject() {
                                    const data = {};
                                    if (this.number != null) {
                                        data.number = this.number;
                                    }
                                    if (this.hash != null) {
                                        data.hash = this.hash;
                                    }
                                    if (this.parentHash != null) {
                                        data.parentHash = this.parentHash;
                                    }
                                    if (this.nonce != null) {
                                        data.nonce = this.nonce;
                                    }
                                    if (this.sha3Uncles != null) {
                                        data.sha3Uncles = this.sha3Uncles;
                                    }
                                    if (this.logsBloom != null) {
                                        data.logsBloom = this.logsBloom;
                                    }
                                    if (this.transactionsRoot != null) {
                                        data.transactionsRoot = this.transactionsRoot;
                                    }
                                    if (this.stateRoot != null) {
                                        data.stateRoot = this.stateRoot;
                                    }
                                    if (this.miner != null) {
                                        data.miner = this.miner;
                                    }
                                    if (this.difficulty != null) {
                                        data.difficulty = this.difficulty;
                                    }
                                    if (this.totalDifficulty != null) {
                                        data.totalDifficulty = this.totalDifficulty;
                                    }
                                    if (this.extraData != null) {
                                        data.extraData = this.extraData;
                                    }
                                    if (this.size != null) {
                                        data.size = this.size;
                                    }
                                    if (this.gasLimit != null) {
                                        data.gasLimit = this.gasLimit;
                                    }
                                    if (this.gasUsed != null) {
                                        data.gasUsed = this.gasUsed;
                                    }
                                    if (this.timestamp != null) {
                                        data.timestamp = this.timestamp.toObject();
                                    }
                                    if (this.transactions != null) {
                                        data.transactions = this.transactions.map((item) => item.toObject());
                                    }
                                    if (this.uncles != null) {
                                        data.uncles = this.uncles.map((item) => item.toObject());
                                    }
                                    return data;
                                }
                                serialize(w) {
                                    const writer = w || new pb_1.BinaryWriter();
                                    if (this.number != 0)
                                        writer.writeFloat(497493176, this.number);
                                    if (this.hash.length)
                                        writer.writeString(3195150, this.hash);
                                    if (this.parentHash.length)
                                        writer.writeString(245049128, this.parentHash);
                                    if (this.nonce.length)
                                        writer.writeString(105002991, this.nonce);
                                    if (this.sha3Uncles.length)
                                        writer.writeString(373514458, this.sha3Uncles);
                                    if (this.logsBloom.length)
                                        writer.writeString(399161966, this.logsBloom);
                                    if (this.transactionsRoot.length)
                                        writer.writeString(526502871, this.transactionsRoot);
                                    if (this.stateRoot.length)
                                        writer.writeString(475330288, this.stateRoot);
                                    if (this.miner.length)
                                        writer.writeString(103900799, this.miner);
                                    if (this.difficulty != 0)
                                        writer.writeFloat(218888126, this.difficulty);
                                    if (this.totalDifficulty != 0)
                                        writer.writeFloat(413035041, this.totalDifficulty);
                                    if (this.extraData.length)
                                        writer.writeString(253792294, this.extraData);
                                    if (this.size != 0)
                                        writer.writeFloat(3530753, this.size);
                                    if (this.gasLimit != 0)
                                        writer.writeFloat(9229217, this.gasLimit);
                                    if (this.gasUsed != 0)
                                        writer.writeFloat(190522826, this.gasUsed);
                                    if (this.has_timestamp)
                                        writer.writeMessage(55126294, this.timestamp, () => this.timestamp.serialize(writer));
                                    if (this.transactions.length)
                                        writer.writeRepeatedMessage(343509336, this.transactions, (item) => item.serialize(writer));
                                    if (this.uncles.length)
                                        writer.writeRepeatedMessage(303842065, this.uncles, (item) => item.serialize(writer));
                                    if (!w)
                                        return writer.getResultBuffer();
                                }
                                static deserialize(bytes) {
                                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EvmBlockPB();
                                    while (reader.nextField()) {
                                        if (reader.isEndGroup())
                                            break;
                                        switch (reader.getFieldNumber()) {
                                            case 497493176:
                                                message.number = reader.readFloat();
                                                break;
                                            case 3195150:
                                                message.hash = reader.readString();
                                                break;
                                            case 245049128:
                                                message.parentHash = reader.readString();
                                                break;
                                            case 105002991:
                                                message.nonce = reader.readString();
                                                break;
                                            case 373514458:
                                                message.sha3Uncles = reader.readString();
                                                break;
                                            case 399161966:
                                                message.logsBloom = reader.readString();
                                                break;
                                            case 526502871:
                                                message.transactionsRoot = reader.readString();
                                                break;
                                            case 475330288:
                                                message.stateRoot = reader.readString();
                                                break;
                                            case 103900799:
                                                message.miner = reader.readString();
                                                break;
                                            case 218888126:
                                                message.difficulty = reader.readFloat();
                                                break;
                                            case 413035041:
                                                message.totalDifficulty = reader.readFloat();
                                                break;
                                            case 253792294:
                                                message.extraData = reader.readString();
                                                break;
                                            case 3530753:
                                                message.size = reader.readFloat();
                                                break;
                                            case 9229217:
                                                message.gasLimit = reader.readFloat();
                                                break;
                                            case 190522826:
                                                message.gasUsed = reader.readFloat();
                                                break;
                                            case 55126294:
                                                reader.readMessage(message.timestamp, () => message.timestamp = dependency_1.google.protobuf.Any.deserialize(reader));
                                                break;
                                            case 343509336:
                                                reader.readMessage(message.transactions, () => pb_1.Message.addToRepeatedWrapperField(message, 343509336, dependency_1.google.protobuf.Any.deserialize(reader), dependency_1.google.protobuf.Any));
                                                break;
                                            case 303842065:
                                                reader.readMessage(message.uncles, () => pb_1.Message.addToRepeatedWrapperField(message, 303842065, dependency_1.google.protobuf.Any.deserialize(reader), dependency_1.google.protobuf.Any));
                                                break;
                                            default: reader.skipField();
                                        }
                                    }
                                    return message;
                                }
                                serializeBinary() {
                                    return this.serialize();
                                }
                                static deserializeBinary(bytes) {
                                    return EvmBlockPB.deserialize(bytes);
                                }
                            }
                            besu.EvmBlockPB = EvmBlockPB;
                        })(besu = connector.besu || (connector.besu = {}));
                    })(connector = ledger.connector || (ledger.connector = {}));
                })(ledger = plugin.ledger || (plugin.ledger = {}));
            })(plugin = cacti.plugin || (cacti.plugin = {}));
        })(cacti = hyperledger.cacti || (hyperledger.cacti = {}));
    })(hyperledger = org.hyperledger || (org.hyperledger = {}));
})(org || (exports.org = org = {}));
//# sourceMappingURL=data:application/json;base64,