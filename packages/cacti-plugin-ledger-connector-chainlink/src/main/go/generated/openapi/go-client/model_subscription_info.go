/*
Hyperledger Cacti Plugin - Connector Chainlink

Can perform basic tasks on a Chainlink ledger

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cacti-plugin-ledger-connector-chainlink

import (
	"encoding/json"
)

// checks if the SubscriptionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionInfo{}

// SubscriptionInfo struct for SubscriptionInfo
type SubscriptionInfo struct {
	Balance string `json:"balance"`
	Owner string `json:"owner"`
	BlockedBalance string `json:"blockedBalance"`
	ProposedOwner string `json:"proposedOwner"`
	Consumers []string `json:"consumers"`
	Flags string `json:"flags"`
}

// NewSubscriptionInfo instantiates a new SubscriptionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionInfo(balance string, owner string, blockedBalance string, proposedOwner string, consumers []string, flags string) *SubscriptionInfo {
	this := SubscriptionInfo{}
	this.Balance = balance
	this.Owner = owner
	this.BlockedBalance = blockedBalance
	this.ProposedOwner = proposedOwner
	this.Consumers = consumers
	this.Flags = flags
	return &this
}

// NewSubscriptionInfoWithDefaults instantiates a new SubscriptionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionInfoWithDefaults() *SubscriptionInfo {
	this := SubscriptionInfo{}
	return &this
}

// GetBalance returns the Balance field value
func (o *SubscriptionInfo) GetBalance() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value
// and a boolean to check if the value has been set.
func (o *SubscriptionInfo) GetBalanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Balance, true
}

// SetBalance sets field value
func (o *SubscriptionInfo) SetBalance(v string) {
	o.Balance = v
}

// GetOwner returns the Owner field value
func (o *SubscriptionInfo) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *SubscriptionInfo) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *SubscriptionInfo) SetOwner(v string) {
	o.Owner = v
}

// GetBlockedBalance returns the BlockedBalance field value
func (o *SubscriptionInfo) GetBlockedBalance() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BlockedBalance
}

// GetBlockedBalanceOk returns a tuple with the BlockedBalance field value
// and a boolean to check if the value has been set.
func (o *SubscriptionInfo) GetBlockedBalanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockedBalance, true
}

// SetBlockedBalance sets field value
func (o *SubscriptionInfo) SetBlockedBalance(v string) {
	o.BlockedBalance = v
}

// GetProposedOwner returns the ProposedOwner field value
func (o *SubscriptionInfo) GetProposedOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProposedOwner
}

// GetProposedOwnerOk returns a tuple with the ProposedOwner field value
// and a boolean to check if the value has been set.
func (o *SubscriptionInfo) GetProposedOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProposedOwner, true
}

// SetProposedOwner sets field value
func (o *SubscriptionInfo) SetProposedOwner(v string) {
	o.ProposedOwner = v
}

// GetConsumers returns the Consumers field value
func (o *SubscriptionInfo) GetConsumers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Consumers
}

// GetConsumersOk returns a tuple with the Consumers field value
// and a boolean to check if the value has been set.
func (o *SubscriptionInfo) GetConsumersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Consumers, true
}

// SetConsumers sets field value
func (o *SubscriptionInfo) SetConsumers(v []string) {
	o.Consumers = v
}

// GetFlags returns the Flags field value
func (o *SubscriptionInfo) GetFlags() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value
// and a boolean to check if the value has been set.
func (o *SubscriptionInfo) GetFlagsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Flags, true
}

// SetFlags sets field value
func (o *SubscriptionInfo) SetFlags(v string) {
	o.Flags = v
}

func (o SubscriptionInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["balance"] = o.Balance
	toSerialize["owner"] = o.Owner
	toSerialize["blockedBalance"] = o.BlockedBalance
	toSerialize["proposedOwner"] = o.ProposedOwner
	toSerialize["consumers"] = o.Consumers
	toSerialize["flags"] = o.Flags
	return toSerialize, nil
}

type NullableSubscriptionInfo struct {
	value *SubscriptionInfo
	isSet bool
}

func (v NullableSubscriptionInfo) Get() *SubscriptionInfo {
	return v.value
}

func (v *NullableSubscriptionInfo) Set(val *SubscriptionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionInfo(val *SubscriptionInfo) *NullableSubscriptionInfo {
	return &NullableSubscriptionInfo{value: val, isSet: true}
}

func (v NullableSubscriptionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


