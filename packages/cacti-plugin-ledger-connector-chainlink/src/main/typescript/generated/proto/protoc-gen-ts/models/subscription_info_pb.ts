/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: models/subscription_info_pb.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/any";
import * as pb_1 from "google-protobuf";
export namespace org.hyperledger.cacti.plugin.ledger.connector.chainlink {
    export class SubscriptionInfoPB extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            balance?: string;
            owner?: string;
            blockedBalance?: string;
            proposedOwner?: string;
            consumers?: string[];
            flags?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [421004483], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("balance" in data && data.balance != undefined) {
                    this.balance = data.balance;
                }
                if ("owner" in data && data.owner != undefined) {
                    this.owner = data.owner;
                }
                if ("blockedBalance" in data && data.blockedBalance != undefined) {
                    this.blockedBalance = data.blockedBalance;
                }
                if ("proposedOwner" in data && data.proposedOwner != undefined) {
                    this.proposedOwner = data.proposedOwner;
                }
                if ("consumers" in data && data.consumers != undefined) {
                    this.consumers = data.consumers;
                }
                if ("flags" in data && data.flags != undefined) {
                    this.flags = data.flags;
                }
            }
        }
        get balance() {
            return pb_1.Message.getFieldWithDefault(this, 339185956, "") as string;
        }
        set balance(value: string) {
            pb_1.Message.setField(this, 339185956, value);
        }
        get owner() {
            return pb_1.Message.getFieldWithDefault(this, 106164915, "") as string;
        }
        set owner(value: string) {
            pb_1.Message.setField(this, 106164915, value);
        }
        get blockedBalance() {
            return pb_1.Message.getFieldWithDefault(this, 491676499, "") as string;
        }
        set blockedBalance(value: string) {
            pb_1.Message.setField(this, 491676499, value);
        }
        get proposedOwner() {
            return pb_1.Message.getFieldWithDefault(this, 141048085, "") as string;
        }
        set proposedOwner(value: string) {
            pb_1.Message.setField(this, 141048085, value);
        }
        get consumers() {
            return pb_1.Message.getFieldWithDefault(this, 421004483, []) as string[];
        }
        set consumers(value: string[]) {
            pb_1.Message.setField(this, 421004483, value);
        }
        get flags() {
            return pb_1.Message.getFieldWithDefault(this, 97513095, "") as string;
        }
        set flags(value: string) {
            pb_1.Message.setField(this, 97513095, value);
        }
        static fromObject(data: {
            balance?: string;
            owner?: string;
            blockedBalance?: string;
            proposedOwner?: string;
            consumers?: string[];
            flags?: string;
        }): SubscriptionInfoPB {
            const message = new SubscriptionInfoPB({});
            if (data.balance != null) {
                message.balance = data.balance;
            }
            if (data.owner != null) {
                message.owner = data.owner;
            }
            if (data.blockedBalance != null) {
                message.blockedBalance = data.blockedBalance;
            }
            if (data.proposedOwner != null) {
                message.proposedOwner = data.proposedOwner;
            }
            if (data.consumers != null) {
                message.consumers = data.consumers;
            }
            if (data.flags != null) {
                message.flags = data.flags;
            }
            return message;
        }
        toObject() {
            const data: {
                balance?: string;
                owner?: string;
                blockedBalance?: string;
                proposedOwner?: string;
                consumers?: string[];
                flags?: string;
            } = {};
            if (this.balance != null) {
                data.balance = this.balance;
            }
            if (this.owner != null) {
                data.owner = this.owner;
            }
            if (this.blockedBalance != null) {
                data.blockedBalance = this.blockedBalance;
            }
            if (this.proposedOwner != null) {
                data.proposedOwner = this.proposedOwner;
            }
            if (this.consumers != null) {
                data.consumers = this.consumers;
            }
            if (this.flags != null) {
                data.flags = this.flags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.balance.length)
                writer.writeString(339185956, this.balance);
            if (this.owner.length)
                writer.writeString(106164915, this.owner);
            if (this.blockedBalance.length)
                writer.writeString(491676499, this.blockedBalance);
            if (this.proposedOwner.length)
                writer.writeString(141048085, this.proposedOwner);
            if (this.consumers.length)
                writer.writeRepeatedString(421004483, this.consumers);
            if (this.flags.length)
                writer.writeString(97513095, this.flags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubscriptionInfoPB {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubscriptionInfoPB();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 339185956:
                        message.balance = reader.readString();
                        break;
                    case 106164915:
                        message.owner = reader.readString();
                        break;
                    case 491676499:
                        message.blockedBalance = reader.readString();
                        break;
                    case 141048085:
                        message.proposedOwner = reader.readString();
                        break;
                    case 421004483:
                        pb_1.Message.addToRepeatedField(message, 421004483, reader.readString());
                        break;
                    case 97513095:
                        message.flags = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SubscriptionInfoPB {
            return SubscriptionInfoPB.deserialize(bytes);
        }
    }
}
