import type { FileBase64 } from "@hyperledger/cactus-plugin-ledger-connector-fabric";

export async function createFileRouterDotGo(): Promise<FileBase64> {
  const body = ROUTER_DOT_GO_BASE64;
  return {
    body,
    filename: "router.go",
  };
}

/**
 * @remarks
 * Do not modify this directly unless you also modified the canonical source here as well:
 * `./packages/cacti-plugin-ledger-connector-chainlink/src/main/go/ccip/fabric/router/router.go`
 *
 * To update this:
 * 1. While having a shell open in the project root directory you can run this command on a Linux machine:
 * ```sh
 * base64 ./packages/cacti-plugin-ledger-connector-chainlink/src/main/go/ccip/fabric/router/router.go &> /tmp/fabric-ccip-router.go.base64
 * ```
 * 2. This will generate the file whose contents you can copy paste into this variable in order to update the contract being used.
 *
 * Remarks:
 * - The reason we have to deal with base64 hear is that the backticks for the go struct tags are causing unfixable escape
 * sequence issues otherwise.
 * - A longer term and better solution would be to have an `./src/main/resources/` directory within the package and
 * use the build scripts to copy files into the `./dist/` from the resources directory so that we can always count on the
 * file being present at a certain relative path. This could still break down during ncc bundling and therefore I chose not to
 * explore that particular rabbithole at this time due to time constraints when this base64 hardcoding works perfectly fine.
 */
export const ROUTER_DOT_GO_BASE64 = String.raw`Ly8gSU1QT1JUQU5UOiBJZiB5b3UgY2hhbmdlIHRoZSBzb3VyY2UgY29kZSBoZXJlIG1ha2Ugc3Vy
ZSB0byBhbHNvIHVwZGF0ZSB0aGUgYmFzZTY0IHJlcHJlc2VudGF0aW9uIG9mIGl0IGluIHRoZSBm
aWxlCi8vIHBhY2thZ2VzL2NhY3RpLXBsdWdpbi1sZWRnZXItY29ubmVjdG9yLWNoYWlubGluay9z
cmMvbWFpbi90eXBlc2NyaXB0L2NjaXAvZmFicmljL3JvdXRlci9yb3V0ZXIuZ28udHMKLy8gT3Ro
ZXJ3aXNlIHRoZSB0ZXN0IGNhc2VzIHdvbid0IGhhdmUgYW4gdXBkYXRlZCB2ZXJzaW9uIG9mIHRo
ZSBjb250cmFjdCB0byBkZXBsb3kgZGVzcGl0ZSB0aGUgY2hhbmdlcyB5b3UndmUgbWFkZSBoZXJl
LgpwYWNrYWdlIG1haW4KCmltcG9ydCAoCgkiZW5jb2RpbmcvanNvbiIKCSJlcnJvcnMiCgkiZm10
IgoJImdpdGh1Yi5jb20vaHlwZXJsZWRnZXIvZmFicmljLWNvbnRyYWN0LWFwaS1nby9jb250cmFj
dGFwaSIKKQoKLy8gRVZNVG9rZW5BbW91bnQgcmVwcmVzZW50cyBhIHRva2VuIGFuZCBpdHMgYW1v
dW50CnR5cGUgRVZNVG9rZW5BbW91bnQgc3RydWN0IHsKCVRva2VuICBzdHJpbmcgYGpzb246InRv
a2VuImAKCUFtb3VudCB1aW50NjQgYGpzb246ImFtb3VudCxzdHJpbmciYAp9CgovLyBBbnkyRVZN
TWVzc2FnZSByZXByZXNlbnRzIGEgbWVzc2FnZSByZWNlaXZlZCBmcm9tIGFub3RoZXIgY2hhaW4K
dHlwZSBBbnkyRVZNTWVzc2FnZSBzdHJ1Y3QgewoJTWVzc2FnZUlkICAgICAgICAgICBzdHJpbmcg
ICAgICAgICAgIGBqc29uOiJtZXNzYWdlSWQiYAoJU291cmNlQ2hhaW5TZWxlY3RvciB1aW50NjQg
ICAgICAgICAgIGBqc29uOiJzb3VyY2VDaGFpblNlbGVjdG9yImAKCVNlbmRlciAgICAgICAgICAg
ICAgc3RyaW5nICAgICAgICAgICBganNvbjoic2VuZGVyImAKCURhdGEgICAgICAgICAgICAgICAg
c3RyaW5nICAgICAgICAgICBganNvbjoiZGF0YSJgCglEZXN0VG9rZW5BbW91bnRzICAgIFtdRVZN
VG9rZW5BbW91bnQgYGpzb246ImRlc3RUb2tlbkFtb3VudHMiYAp9CgovLyBFVk0yQW55TWVzc2Fn
ZSByZXByZXNlbnRzIGEgbWVzc2FnZSBzZW50IHRvIGFub3RoZXIgY2hhaW4KdHlwZSBFVk0yQW55
TWVzc2FnZSBzdHJ1Y3QgewoJUmVjZWl2ZXIgICAgIHN0cmluZyAgICAgICAgICAgYGpzb246InJl
Y2VpdmVyImAKCURhdGEgICAgICAgICBzdHJpbmcgICAgICAgICAgIGBqc29uOiJkYXRhImAKCVRv
a2VuQW1vdW50cyBbXUVWTVRva2VuQW1vdW50IGBqc29uOiJ0b2tlbkFtb3VudHMiYAoJRmVlVG9r
ZW4gICAgIHN0cmluZyAgICAgICAgICAgYGpzb246ImZlZVRva2VuImAKCUV4dHJhQXJncyAgICBz
dHJpbmcgICAgICAgICAgIGBqc29uOiJleHRyYUFyZ3MiYAp9CgovLyBSb3V0ZXJDb250cmFjdCBw
cm92aWRlcyBtZXRob2RzIHRvIHJvdXRlIG1lc3NhZ2VzCnR5cGUgUm91dGVyQ29udHJhY3Qgc3Ry
dWN0IHsKCWNvbnRyYWN0YXBpLkNvbnRyYWN0Cn0KCi8vIENjaXBTZW5kIHJlY29yZHMgYW5kIGVt
aXRzIGFuIG91dGdvaW5nIG1lc3NhZ2UKZnVuYyAocmMgKlJvdXRlckNvbnRyYWN0KSBDY2lwU2Vu
ZChjdHggY29udHJhY3RhcGkuVHJhbnNhY3Rpb25Db250ZXh0SW50ZXJmYWNlLCByZWNlaXZlckhl
eCwgZGF0YSwgZmVlVG9rZW4sIGV4dHJhQXJncywgdG9rZW5BbW91bnRzSnNvbiBzdHJpbmcpIChz
dHJpbmcsIGVycm9yKSB7CgkKCS8vIERlc2VyaWFsaXplIHRva2VuQW1vdW50c0pzb24gaW50byBh
IGxvY2FsIHZhcmlhYmxlCgl2YXIgdG9rZW5BbW91bnRzIFtdRVZNVG9rZW5BbW91bnQKCWVyciA6
PSBqc29uLlVubWFyc2hhbChbXWJ5dGUodG9rZW5BbW91bnRzSnNvbiksICZ0b2tlbkFtb3VudHMp
CglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gIiIsIGZtdC5FcnJvcmYoImZhaWxlZCB0byBkZXNl
cmlhbGl6ZSB0b2tlbkFtb3VudHNKc29uOiAldiIsIGVycikKCX0KCgkvLyBDcmVhdGUgdGhlIG1l
c3NhZ2UKCW1lc3NhZ2UgOj0gRVZNMkFueU1lc3NhZ2V7CgkJUmVjZWl2ZXI6ICAgICByZWNlaXZl
ckhleCwKCQlEYXRhOiAgICAgICAgIGRhdGEsCgkJVG9rZW5BbW91bnRzOiB0b2tlbkFtb3VudHMs
CgkJRmVlVG9rZW46ICAgICBmZWVUb2tlbiwKCQlFeHRyYUFyZ3M6ICAgIGV4dHJhQXJncywKCX0K
CgkvLyBHZW5lcmF0ZSBhIHVuaXF1ZSBtZXNzYWdlIElECgl0eElEIDo9IGN0eC5HZXRTdHViKCku
R2V0VHhJRCgpCgoJLy8gU3RvcmUgdGhlIG1lc3NhZ2UgaW4gc3RhdGUKCW1lc3NhZ2VCeXRlcywg
ZXJyIDo9IGpzb24uTWFyc2hhbChtZXNzYWdlKQoJaWYgZXJyICE9IG5pbCB7CgkJcmV0dXJuICIi
LCBmbXQuRXJyb3JmKCJmYWlsZWQgdG8gc2VyaWFsaXplIG1lc3NhZ2U6ICV2IiwgZXJyKQoJfQoJ
ZXJyID0gY3R4LkdldFN0dWIoKS5QdXRTdGF0ZSh0eElELCBtZXNzYWdlQnl0ZXMpCglpZiBlcnIg
IT0gbmlsIHsKCQlyZXR1cm4gIiIsIGZtdC5FcnJvcmYoImZhaWxlZCB0byBzYXZlIG1lc3NhZ2Ug
dG8gc3RhdGU6ICV2IiwgZXJyKQoJfQoKCS8vIEVtaXQgYW4gZXZlbnQKCWVyciA9IGN0eC5HZXRT
dHViKCkuU2V0RXZlbnQoIkNDSVBNZXNzYWdlU2VudCIsIG1lc3NhZ2VCeXRlcykKCWlmIGVyciAh
PSBuaWwgewoJCXJldHVybiAiIiwgZm10LkVycm9yZigiZmFpbGVkIHRvIGVtaXQgZXZlbnQ6ICV2
IiwgZXJyKQoJfQoKCXJldHVybiB0eElELCBuaWwKfQoKLy8gUm91dGVNZXNzYWdlIHJlY29yZHMg
YW5kIGVtaXRzIGFuIGluY29taW5nIG1lc3NhZ2UKZnVuYyAocmMgKlJvdXRlckNvbnRyYWN0KSBS
b3V0ZU1lc3NhZ2UoY3R4IGNvbnRyYWN0YXBpLlRyYW5zYWN0aW9uQ29udGV4dEludGVyZmFjZSwg
bWVzc2FnZUlkIHN0cmluZywgc291cmNlQ2hhaW5TZWxlY3RvciB1aW50NjQsIHNlbmRlciwgZGF0
YSBzdHJpbmcsIGRlc3RUb2tlbkFtb3VudHMgW11FVk1Ub2tlbkFtb3VudCkgZXJyb3IgewoJLy8g
Q3JlYXRlIHRoZSBtZXNzYWdlCgltZXNzYWdlIDo9IEFueTJFVk1NZXNzYWdlewoJCU1lc3NhZ2VJ
ZDogICAgICAgICAgIG1lc3NhZ2VJZCwKCQlTb3VyY2VDaGFpblNlbGVjdG9yOiBzb3VyY2VDaGFp
blNlbGVjdG9yLAoJCVNlbmRlcjogICAgICAgICAgICAgIHNlbmRlciwKCQlEYXRhOiAgICAgICAg
ICAgICAgICBkYXRhLAoJCURlc3RUb2tlbkFtb3VudHM6ICAgIGRlc3RUb2tlbkFtb3VudHMsCgl9
CgoJLy8gU3RvcmUgdGhlIG1lc3NhZ2UgaW4gc3RhdGUKCW1lc3NhZ2VCeXRlcywgZXJyIDo9IGpz
b24uTWFyc2hhbChtZXNzYWdlKQoJaWYgZXJyICE9IG5pbCB7CgkJcmV0dXJuIGZtdC5FcnJvcmYo
ImZhaWxlZCB0byBzZXJpYWxpemUgbWVzc2FnZTogJXYiLCBlcnIpCgl9CgllcnIgPSBjdHguR2V0
U3R1YigpLlB1dFN0YXRlKG1lc3NhZ2VJZCwgbWVzc2FnZUJ5dGVzKQoJaWYgZXJyICE9IG5pbCB7
CgkJcmV0dXJuIGZtdC5FcnJvcmYoImZhaWxlZCB0byBzYXZlIG1lc3NhZ2UgdG8gc3RhdGU6ICV2
IiwgZXJyKQoJfQoKCS8vIEVtaXQgYW4gZXZlbnQKCWVyciA9IGN0eC5HZXRTdHViKCkuU2V0RXZl
bnQoIk1lc3NhZ2VFeGVjdXRlZCIsIG1lc3NhZ2VCeXRlcykKCWlmIGVyciAhPSBuaWwgewoJCXJl
dHVybiBmbXQuRXJyb3JmKCJmYWlsZWQgdG8gZW1pdCBldmVudDogJXYiLCBlcnIpCgl9CgoJcmV0
dXJuIG5pbAp9CgovLyBRdWVyeU1lc3NhZ2UgcmV0cmlldmVzIGEgbWVzc2FnZSBieSBpdHMgSUQK
ZnVuYyAocmMgKlJvdXRlckNvbnRyYWN0KSBRdWVyeU1lc3NhZ2UoY3R4IGNvbnRyYWN0YXBpLlRy
YW5zYWN0aW9uQ29udGV4dEludGVyZmFjZSwgbWVzc2FnZUlkIHN0cmluZykgKCpBbnkyRVZNTWVz
c2FnZSwgZXJyb3IpIHsKCW1lc3NhZ2VCeXRlcywgZXJyIDo9IGN0eC5HZXRTdHViKCkuR2V0U3Rh
dGUobWVzc2FnZUlkKQoJaWYgZXJyICE9IG5pbCB7CgkJcmV0dXJuIG5pbCwgZm10LkVycm9yZigi
ZmFpbGVkIHRvIHJlYWQgbWVzc2FnZSBmcm9tIHN0YXRlOiAldiIsIGVycikKCX0KCWlmIG1lc3Nh
Z2VCeXRlcyA9PSBuaWwgewoJCXJldHVybiBuaWwsIGVycm9ycy5OZXcoIm1lc3NhZ2Ugbm90IGZv
dW5kIikKCX0KCgl2YXIgbWVzc2FnZSBBbnkyRVZNTWVzc2FnZQoJZXJyID0ganNvbi5Vbm1hcnNo
YWwobWVzc2FnZUJ5dGVzLCAmbWVzc2FnZSkKCWlmIGVyciAhPSBuaWwgewoJCXJldHVybiBuaWws
IGZtdC5FcnJvcmYoImZhaWxlZCB0byBkZXNlcmlhbGl6ZSBtZXNzYWdlOiAldiIsIGVycikKCX0K
CglyZXR1cm4gJm1lc3NhZ2UsIG5pbAp9CgovLyBRdWVyeU91dGdvaW5nTWVzc2FnZSByZXRyaWV2
ZXMgYW4gb3V0Z29pbmcgbWVzc2FnZSBieSBpdHMgSUQKZnVuYyAocmMgKlJvdXRlckNvbnRyYWN0
KSBRdWVyeU91dGdvaW5nTWVzc2FnZShjdHggY29udHJhY3RhcGkuVHJhbnNhY3Rpb25Db250ZXh0
SW50ZXJmYWNlLCB0eElEIHN0cmluZykgKCpFVk0yQW55TWVzc2FnZSwgZXJyb3IpIHsKCW1lc3Nh
Z2VCeXRlcywgZXJyIDo9IGN0eC5HZXRTdHViKCkuR2V0U3RhdGUodHhJRCkKCWlmIGVyciAhPSBu
aWwgewoJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoImZhaWxlZCB0byByZWFkIG1lc3NhZ2UgZnJv
bSBzdGF0ZTogJXYiLCBlcnIpCgl9CglpZiBtZXNzYWdlQnl0ZXMgPT0gbmlsIHsKCQlyZXR1cm4g
bmlsLCBlcnJvcnMuTmV3KCJtZXNzYWdlIG5vdCBmb3VuZCIpCgl9CgoJdmFyIG1lc3NhZ2UgRVZN
MkFueU1lc3NhZ2UKCWVyciA9IGpzb24uVW5tYXJzaGFsKG1lc3NhZ2VCeXRlcywgJm1lc3NhZ2Up
CglpZiBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gbmlsLCBmbXQuRXJyb3JmKCJmYWlsZWQgdG8gZGVz
ZXJpYWxpemUgbWVzc2FnZTogJXYiLCBlcnIpCgl9CgoJcmV0dXJuICZtZXNzYWdlLCBuaWwKfQoK
ZnVuYyBtYWluKCkgewoJY2hhaW5jb2RlLCBlcnIgOj0gY29udHJhY3RhcGkuTmV3Q2hhaW5jb2Rl
KCZSb3V0ZXJDb250cmFjdHt9KQoJaWYgZXJyICE9IG5pbCB7CgkJZm10LlByaW50ZigiRXJyb3Ig
Y3JlYXRpbmcgUm91dGVyQ29udHJhY3QgY2hhaW5jb2RlOiAldiIsIGVycikKCQlyZXR1cm4KCX0K
CglpZiBlcnIgOj0gY2hhaW5jb2RlLlN0YXJ0KCk7IGVyciAhPSBuaWwgewoJCWZtdC5QcmludGYo
IkVycm9yIHN0YXJ0aW5nIFJvdXRlckNvbnRyYWN0IGNoYWluY29kZTogJXYiLCBlcnIpCgl9Cn0K
`;
