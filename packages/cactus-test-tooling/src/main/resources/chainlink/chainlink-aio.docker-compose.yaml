services:
  # remix:
  #   image: remixproject/remix-ide:yann300-patch-36
  #   container_name: remix
  #   ports:
  #     - "8000:80"

  postgres1:
    image: postgres:16.4-alpine3.20
    container_name: postgres1

    environment:
      POSTGRES_DB: chainlink_db
      POSTGRES_USER: chainlink_user
      POSTGRES_PASSWORD: 3kcixh_xgm3_yJs_uV9q
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"

  postgres2:
    image: postgres:16.4-alpine3.20
    container_name: postgres2

    environment:
      POSTGRES_DB: chainlink_db
      POSTGRES_USER: chainlink_user
      POSTGRES_PASSWORD: 3kcixh_xgm3_yJs_uV9q
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "6432:5432"

    # log_statement possible options: none, ddl, mod, all
    command: ["postgres", "-c", "log_statement=none"]

  postgres3:
    image: postgres:16.4-alpine3.20
    container_name: postgres3

    environment:
      POSTGRES_DB: chainlink_db
      POSTGRES_USER: chainlink_user
      POSTGRES_PASSWORD: 3kcixh_xgm3_yJs_uV9q
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "7432:5432"

    # log_statement possible options: none, ddl, mod, all
    command: ["postgres", "-c", "log_statement=none"]

  postgres4:
    image: postgres:16.4-alpine3.20
    container_name: postgres4

    environment:
      POSTGRES_DB: chainlink_db
      POSTGRES_USER: chainlink_user
      POSTGRES_PASSWORD: 3kcixh_xgm3_yJs_uV9q
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "8432:5432"

    # log_statement possible options: none, ddl, mod, all
    command: ["postgres", "-c", "log_statement=none"]

  postgres5:
    image: postgres:16.4-alpine3.20
    container_name: postgres5

    environment:
      POSTGRES_DB: chainlink_db
      POSTGRES_USER: chainlink_user
      POSTGRES_PASSWORD: 3kcixh_xgm3_yJs_uV9q
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "9432:5432"

    # log_statement possible options: none, ddl, mod, all
    command: ["postgres", "-c", "log_statement=none"]

  chainlink1:
    image: chainlink-ccip:local3
    # image: smartcontract/chainlink:2.19.0
    container_name: chainlink1
    depends_on:
      - postgres1
    restart: on-failure:10
    volumes:
      - ./chainlink1/config:/chainlink/config
      - ./chainlink1/secrets:/chainlink/secrets
      - ./chainlink1/chainlink-demo-gui-email-and-password.txt:/chainlink/.api
    ports:
      - "6688:6688"

    command:
      [
        "node",
        "-config=/chainlink/config/config.toml",
        "-secrets=/chainlink/secrets/secrets.toml",
        "start",
        "-a=/chainlink/.api",
      ]

  chainlink2:
    image: chainlink-ccip:local3
    # image: smartcontract/chainlink:2.19.0
    container_name: chainlink2
    depends_on:
      - postgres2
    restart: on-failure:10
    volumes:
      - ./chainlink2/config:/chainlink/config
      - ./chainlink2/secrets:/chainlink/secrets
      - ./chainlink2/chainlink-demo-gui-email-and-password.txt:/chainlink/.api
    ports:
      - "16688:6688"
    command:
      [
        "node",
        "-config=/chainlink/config/config.toml",
        "-secrets=/chainlink/secrets/secrets.toml",
        "start",
        "-a=/chainlink/.api",
      ]

  chainlink3:
    image: chainlink-ccip:local3
    # image: smartcontract/chainlink:2.19.0
    container_name: chainlink3
    depends_on:
      - postgres3
    restart: on-failure:10
    volumes:
      - ./chainlink3/config:/chainlink/config
      - ./chainlink3/secrets:/chainlink/secrets
      - ./chainlink3/chainlink-demo-gui-email-and-password.txt:/chainlink/.api
    ports:
      - "26688:6688"
    command:
      [
        "node",
        "-config=/chainlink/config/config.toml",
        "-secrets=/chainlink/secrets/secrets.toml",
        "start",
        "-a=/chainlink/.api",
      ]

  chainlink4:
    image: chainlink-ccip:local3
    # image: smartcontract/chainlink:2.19.0
    container_name: chainlink4
    depends_on:
      - postgres4
    restart: on-failure:10
    volumes:
      - ./chainlink4/config:/chainlink/config
      - ./chainlink4/secrets:/chainlink/secrets
      - ./chainlink4/chainlink-demo-gui-email-and-password.txt:/chainlink/.api
    ports:
      - "36688:6688"
    command:
      [
        "node",
        "-config=/chainlink/config/config.toml",
        "-secrets=/chainlink/secrets/secrets.toml",
        "start",
        "-a=/chainlink/.api",
      ]

  chainlink5:
    image: chainlink-ccip:local3
    # image: smartcontract/chainlink:2.19.0
    container_name: chainlink5
    depends_on:
      - postgres5
    restart: on-failure:10
    volumes:
      - ./chainlink5/config:/chainlink/config
      - ./chainlink5/secrets:/chainlink/secrets
      - ./chainlink5/chainlink-demo-gui-email-and-password.txt:/chainlink/.api
    ports:
      - "46688:6688"
    command:
      [
        "node",
        "-config=/chainlink/config/config.toml",
        "-secrets=/chainlink/secrets/secrets.toml",
        "start",
        "-a=/chainlink/.api",
      ]

  # proxychain:
  #   image: ethereum/client-go:v1.14.12
  #   container_name: proxychain
  #   ports:
  #     - "9545:8545" # HTTP JSON-RPC
  #     - "9546:8546" # WebSocket JSON-RPC
  #   volumes:
  #     - ${PWD}/packages/cactus-test-tooling/src/main/resources/chainlink/proxychain/genesis.json:/opt/proxychain/genesis.json
  #     - ${PWD}/packages/cactus-test-tooling/src/main/resources/chainlink/proxychain/geth.config.toml:/opt/proxychain/geth.config.toml
  #   entrypoint:
  #     [
  #       "sh",
  #       "-c",
  #       "geth init /opt/proxychain/genesis.json && geth --dev --config=/opt/proxychain/geth.config.toml",
  #     ]

  # hardhat:
  #   image: ethereumoptimism/hardhat:latest # Use a Hardhat-compatible image
  #   container_name: hardhat
  #   command: ["node", "./node_modules/.bin/hardhat", "node"]
  #   environment:
  #     HARDHAT_NETWORK: hardhat
  #     HARDHAT_PORT: 8545 # Specify the Hardhat network port
  #     HARDHAT_CHAIN_ID: 31337 # Hardhat's default chain ID
  #   ports:
  #     - "8545:8545" # HTTP JSON-RPC for Hardhat
  #   volumes:
  #     - ${PWD}/hardhat:/usr/src/app # Mount your Hardhat project directory
  #   working_dir: /usr/src/app

  besu:
    image: hyperledger/besu:24.12.2
    container_name: besu
    environment:
      BESU_NETWORK_ID: 90000001
      # https://besu.hyperledger.org/development/public-networks/how-to/monitor/logging#basic-logging
      # Valid log levels are OFF, ERROR, WARN, INFO, DEBUG, TRACE, ALL. The default level is INFO.
      BESU_LOGGING: INFO
      BESU_GENESIS_FILE: "/opt/besu/genesis.json"
      BESU_REVERT_REASON_ENABLED: true
      BESU_NETWORK: dev # Equivalent to --network=dev
      BESU_RPC_HTTP_ENABLED: "true" # Equivalent to --rpc-http-enabled
      BESU_RPC_WS_ENABLED: "true" # Equivalent to --rpc-ws-enabled
      BESU_HOST_WHITELIST: "*" # Equivalent to --host-whitelist=*
      BESU_RPC_HTTP_API: "ETH,NET,WEB3,CLIQUE,TRACE,DEBUG" # Equivalent to --rpc-http-api=ETH,NET,WEB3,CLIQUE
      BESU_RPC_HTTP_CORS_ORIGINS: all
      BESU_RPC_WS_API: "ETH,NET,WEB3,CLIQUE,TRACE,DEBUG" # Equivalent to --rpc-ws-api=ETH,NET,WEB3,CLIQUE
      BESU_MINER_ENABLED: "true" # Equivalent to --miner-enabled
      BESU_MINER_COINBASE: "0x0000000000000000000000000000000000000000" # Miner coinbase address
      BESU_MIN_GAS_PRICE: "0" # Equivalent to --min-gas-price=0
    ports:
      - "8545:8545" # HTTP JSON-RPC
      - "8546:8546" # WebSocket JSON-RPC
    volumes:
      - ${PWD}/packages/cactus-test-tooling/src/main/resources/chainlink/besu/genesis.json:/opt/besu/genesis.json

  # proxychain:
  #   image: hyperledger/besu:24.12.2
  #   container_name: proxychain
  #   environment:
  #     BESU_NETWORK_ID: 90000002
  #     # https://besu.hyperledger.org/development/public-networks/how-to/monitor/logging#basic-logging
  #     # Valid log levels are OFF, ERROR, WARN, INFO, DEBUG, TRACE, ALL. The default level is INFO.
  #     BESU_LOGGING: WARN
  #     BESU_GENESIS_FILE: "/opt/besu/genesis.json"
  #     BESU_REVERT_REASON_ENABLED: true
  #     BESU_NETWORK: dev # Equivalent to --network=dev
  #     BESU_RPC_HTTP_ENABLED: "true" # Equivalent to --rpc-http-enabled
  #     BESU_RPC_WS_ENABLED: "true" # Equivalent to --rpc-ws-enabled
  #     BESU_HOST_WHITELIST: "*" # Equivalent to --host-whitelist=*
  #     BESU_RPC_HTTP_API: "ETH,NET,WEB3,CLIQUE,TRACE,DEBUG" # Equivalent to --rpc-http-api=ETH,NET,WEB3,CLIQUE
  #     BESU_RPC_HTTP_CORS_ORIGINS: all
  #     BESU_RPC_WS_API: "ETH,NET,WEB3,CLIQUE,TRACE,DEBUG" # Equivalent to --rpc-ws-api=ETH,NET,WEB3,CLIQUE
  #     BESU_MINER_ENABLED: "true" # Equivalent to --miner-enabled
  #     BESU_MINER_COINBASE: "0x0000000000000000000000000000000000000000" # Miner coinbase address
  #     BESU_MIN_GAS_PRICE: "0" # Equivalent to --min-gas-price=0
  #   ports:
  #     - "9545:8545" # HTTP JSON-RPC
  #     - "9546:8546" # WebSocket JSON-RPC
  #   volumes:
  #     - ${PWD}/packages/cactus-test-tooling/src/main/resources/chainlink/proxychain/genesis.json:/opt/besu/genesis.json

  cacti:
    container_name: cacti
    # image: ghcr.io/hyperledger-cacti/cactus-cmd-api-server:2024-11-15t04-48-04-dev-c4e28fd06
    restart: on-failure
    build:
      context: ../../../../../../packages/cactus-cmd-api-server/
      dockerfile: cmd-api-server.Dockerfile

    volumes:
      - cactisrc:/usr/src/cacti

    ports:
      - 4000:4000

    environment:
      AUTHORIZATION_PROTOCOL: NONE
      AUTHORIZATION_CONFIG_JSON: "{}"
      API_MTLS_ENABLED: "false"
      API_TLS_ENABLED: "false"
      API_CORS_DOMAIN_CSV: \*
      API_TLS_CERT_PEM: "-"
      API_TLS_CLIENT_CA_PEM: "-"
      API_TLS_KEY_PEM: "-"
      API_HOST: 0.0.0.0
      API_PORT: 4000
      CRPC_HOST: 0.0.0.0
      GRPC_TLS_ENABLED: false
      LOG_LEVEL: DEBUG
      PLUGINS: >-
        [
          {
              "packageName": "@hyperledger/cactus-plugin-keychain-memory",
              "type": "org.hyperledger.cactus.plugin_import_type.LOCAL", 
              "action": "org.hyperledger.cactus.plugin_import_action.INSTALL",
              "options": {
                  "packageSrc": "/usr/src/cacti/packages/cactus-plugin-keychain-memory/",
                  "keychainId": "keychain_id_1",
                  "instanceId": "plugin-keychain-memory-1"
              }
          },
          {
              "packageName": "@hyperledger/cactus-plugin-ledger-connector-besu",
              "type": "org.hyperledger.cactus.plugin_import_type.LOCAL", 
              "action": "org.hyperledger.cactus.plugin_import_action.INSTALL",
              "options": {
                  "packageSrc": "/usr/src/cacti/packages/cactus-plugin-ledger-connector-besu/",
                  "rpcApiHttpHost": "http://besu:8545",
                  "rpcApiWsHost": "ws://besu:8546",
                  "instanceId": "plugin-connector-besu-1"
              }
          },
          {
              "packageName": "@hyperledger/cacti-plugin-ledger-connector-chainlink",
              "type": "org.hyperledger.cactus.plugin_import_type.LOCAL", 
              "action": "org.hyperledger.cactus.plugin_import_action.INSTALL",
              "options": {
                  "packageSrc": "/usr/src/cacti/packages/cacti-plugin-ledger-connector-chainlink/",
                  "instanceId": "plugin-connetocr-chainlink-1",
                  "ledgerHttpHost": "http://chainlink1",
                  "ledgerHttpPort": 6688
              }
          }
        ]

  cacti2:
    container_name: cacti2
    # image: ghcr.io/hyperledger-cacti/cactus-cmd-api-server:2024-11-15t04-48-04-dev-c4e28fd06
    restart: on-failure
    build:
      context: ../../../../../../packages/cactus-cmd-api-server/
      dockerfile: cmd-api-server.Dockerfile

    volumes:
      - cactisrc:/usr/src/cacti

    ports:
      - 5000:4000

    extra_hosts:
        - "host.docker.internal:10.0.0.41"

    environment:
      AUTHORIZATION_PROTOCOL: NONE
      AUTHORIZATION_CONFIG_JSON: "{}"
      API_MTLS_ENABLED: "false"
      API_TLS_ENABLED: "false"
      API_CORS_DOMAIN_CSV: \*
      API_TLS_CERT_PEM: "-"
      API_TLS_CLIENT_CA_PEM: "-"
      API_TLS_KEY_PEM: "-"
      API_HOST: 0.0.0.0
      API_PORT: 4000
      CRPC_HOST: 0.0.0.0
      GRPC_TLS_ENABLED: false
      LOG_LEVEL: DEBUG
      PLUGINS: >-
        [
          {
              "packageName": "@hyperledger/cactus-plugin-ledger-connector-besu",
              "type": "org.hyperledger.cactus.plugin_import_type.LOCAL", 
              "action": "org.hyperledger.cactus.plugin_import_action.INSTALL",
              "options": {
                  "packageSrc": "/usr/src/cacti/packages/cactus-plugin-ledger-connector-besu/",
                  "rpcApiHttpHost": "http://host.docker.internal:8545",
                  "rpcApiWsHost": "ws://host.docker.internal:8546",
                  "instanceId": "plugin-connector-besu-2"
              }
          }
        ]

volumes:
  cactisrc:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /home/peter/a/cacti-upstream/
