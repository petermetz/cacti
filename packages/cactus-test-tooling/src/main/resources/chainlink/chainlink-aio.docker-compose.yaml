services:
  # remix:
  #   image: remixproject/remix-ide:yann300-patch-36
  #   container_name: remix
  #   ports:
  #     - "8000:80"

  postgres1:
    image: postgres:16.4-alpine3.20
    container_name: postgres1

    environment:
      POSTGRES_DB: chainlink_db
      POSTGRES_USER: chainlink_user
      POSTGRES_PASSWORD: 3kcixh_xgm3_yJs_uV9q
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"

    # log_statement possible options: none, ddl, mod, all
    command: ["postgres", "-c", "log_statement=none"]

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chainlink_user -d chainlink_db"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  postgres2:
    image: postgres:16.4-alpine3.20
    container_name: postgres2

    environment:
      POSTGRES_DB: chainlink_db
      POSTGRES_USER: chainlink_user
      POSTGRES_PASSWORD: 3kcixh_xgm3_yJs_uV9q
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "6432:5432"

    # log_statement possible options: none, ddl, mod, all
    command: ["postgres", "-c", "log_statement=none"]

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chainlink_user -d chainlink_db"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  postgres3:
    image: postgres:16.4-alpine3.20
    container_name: postgres3

    environment:
      POSTGRES_DB: chainlink_db
      POSTGRES_USER: chainlink_user
      POSTGRES_PASSWORD: 3kcixh_xgm3_yJs_uV9q
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "7432:5432"

    # log_statement possible options: none, ddl, mod, all
    command: ["postgres", "-c", "log_statement=none"]

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chainlink_user -d chainlink_db"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  postgres4:
    image: postgres:16.4-alpine3.20
    container_name: postgres4

    environment:
      POSTGRES_DB: chainlink_db
      POSTGRES_USER: chainlink_user
      POSTGRES_PASSWORD: 3kcixh_xgm3_yJs_uV9q
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "8432:5432"

    # log_statement possible options: none, ddl, mod, all
    command: ["postgres", "-c", "log_statement=none"]

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chainlink_user -d chainlink_db"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  postgres5:
    image: postgres:16.4-alpine3.20
    container_name: postgres5

    environment:
      POSTGRES_DB: chainlink_db
      POSTGRES_USER: chainlink_user
      POSTGRES_PASSWORD: 3kcixh_xgm3_yJs_uV9q
      POSTGRES_HOST_AUTH_METHOD: trust

    ports:
      - "9432:5432"

    # log_statement possible options: none, ddl, mod, all
    command: ["postgres", "-c", "log_statement=none"]

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chainlink_user -d chainlink_db"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  chainlink1:
    image: chainlink-ccip:local4
    # image: smartcontract/chainlink:2.19.0
    container_name: chainlink1

    depends_on:
      postgres1:
          condition: service_healthy
          restart: false
      besu:
          condition: service_healthy
          restart: false
      proxychain:
          condition: service_healthy
          restart: false

    restart: on-failure:10
    volumes:
      - ./chainlink1/config:/chainlink/config
      - ./chainlink1/secrets:/chainlink/secrets
      - ./chainlink1/chainlink-demo-gui-email-and-password.txt:/chainlink/.api
    ports:
      - "6688:6688"

    command:
      [
        "node",
        "-config=/chainlink/config/config.toml",
        "-secrets=/chainlink/secrets/secrets.toml",
        "start",
        "-a=/chainlink/.api",
      ]

  chainlink2:
    image: chainlink-ccip:local4
    # image: smartcontract/chainlink:2.19.0
    container_name: chainlink2

    depends_on:
      postgres2:
          condition: service_healthy
          restart: false
      chainlink1:
          condition: service_healthy
          restart: true

    restart: on-failure:10
    volumes:
      - ./chainlink2/config:/chainlink/config
      - ./chainlink2/secrets:/chainlink/secrets
      - ./chainlink2/chainlink-demo-gui-email-and-password.txt:/chainlink/.api
    ports:
      - "16688:6688"
    command:
      [
        "node",
        "-config=/chainlink/config/config.toml",
        "-secrets=/chainlink/secrets/secrets.toml",
        "start",
        "-a=/chainlink/.api",
      ]

  chainlink3:
    image: chainlink-ccip:local4
    # image: smartcontract/chainlink:2.19.0
    container_name: chainlink3

    depends_on:
      postgres3:
          condition: service_healthy
          restart: false
      chainlink1:
          condition: service_healthy
          restart: true

    restart: on-failure:10
    volumes:
      - ./chainlink3/config:/chainlink/config
      - ./chainlink3/secrets:/chainlink/secrets
      - ./chainlink3/chainlink-demo-gui-email-and-password.txt:/chainlink/.api
    ports:
      - "26688:6688"
    command:
      [
        "node",
        "-config=/chainlink/config/config.toml",
        "-secrets=/chainlink/secrets/secrets.toml",
        "start",
        "-a=/chainlink/.api",
      ]

  chainlink4:
    image: chainlink-ccip:local4
    # image: smartcontract/chainlink:2.19.0
    container_name: chainlink4
    
    depends_on:
      postgres4:
          condition: service_healthy
          restart: false
      chainlink1:
          condition: service_healthy
          restart: true

    restart: on-failure:10
    volumes:
      - ./chainlink4/config:/chainlink/config
      - ./chainlink4/secrets:/chainlink/secrets
      - ./chainlink4/chainlink-demo-gui-email-and-password.txt:/chainlink/.api
    ports:
      - "36688:6688"
    command:
      [
        "node",
        "-config=/chainlink/config/config.toml",
        "-secrets=/chainlink/secrets/secrets.toml",
        "start",
        "-a=/chainlink/.api",
      ]

  chainlink5:
    image: chainlink-ccip:local4
    # image: smartcontract/chainlink:2.19.0
    container_name: chainlink5
    
    depends_on:
      postgres5:
          condition: service_healthy
          restart: false
      chainlink1:
          condition: service_healthy
          restart: true

    restart: on-failure:10
    volumes:
      - ./chainlink5/config:/chainlink/config
      - ./chainlink5/secrets:/chainlink/secrets
      - ./chainlink5/chainlink-demo-gui-email-and-password.txt:/chainlink/.api
    ports:
      - "46688:6688"
    command:
      [
        "node",
        "-config=/chainlink/config/config.toml",
        "-secrets=/chainlink/secrets/secrets.toml",
        "start",
        "-a=/chainlink/.api",
      ]

  # proxychain:
  #   image: ethereum/client-go:v1.14.12
  #   container_name: proxychain
  #   ports:
  #     - "9545:8545" # HTTP JSON-RPC
  #     - "9546:8546" # WebSocket JSON-RPC
  #   volumes:
  #     - ${PWD}/packages/cactus-test-tooling/src/main/resources/chainlink/proxychain/genesis.json:/opt/proxychain/genesis.json
  #     - ${PWD}/packages/cactus-test-tooling/src/main/resources/chainlink/proxychain/geth.config.toml:/opt/proxychain/geth.config.toml
  #   entrypoint:
  #     [
  #       "sh",
  #       "-c",
  #       "geth init /opt/proxychain/genesis.json && geth --dev --config=/opt/proxychain/geth.config.toml",
  #     ]

  # hardhat:
  #   image: ethereumoptimism/hardhat:latest # Use a Hardhat-compatible image
  #   container_name: hardhat
  #   command: ["node", "./node_modules/.bin/hardhat", "node"]
  #   environment:
  #     HARDHAT_NETWORK: hardhat
  #     HARDHAT_PORT: 8545 # Specify the Hardhat network port
  #     HARDHAT_CHAIN_ID: 31337 # Hardhat's default chain ID
  #   ports:
  #     - "8545:8545" # HTTP JSON-RPC for Hardhat
  #   volumes:
  #     - ${PWD}/hardhat:/usr/src/app # Mount your Hardhat project directory
  #   working_dir: /usr/src/app

  besu:
    image: hyperledger/besu:24.12.2
    container_name: besu
    environment:
      BESU_NETWORK_ID: 90000001
      # https://besu.hyperledger.org/development/public-networks/how-to/monitor/logging#basic-logging
      # Valid log levels are OFF, ERROR, WARN, INFO, DEBUG, TRACE, ALL. The default level is INFO.
      BESU_LOGGING: WARN
      BESU_GENESIS_FILE: "/opt/besu/genesis.json"
      BESU_REVERT_REASON_ENABLED: true
      BESU_NETWORK: dev # Equivalent to --network=dev
      BESU_RPC_HTTP_ENABLED: "true" # Equivalent to --rpc-http-enabled
      BESU_RPC_WS_ENABLED: "true" # Equivalent to --rpc-ws-enabled
      BESU_HOST_WHITELIST: "*" # Equivalent to --host-whitelist=*
      BESU_RPC_HTTP_API: "ETH,NET,WEB3,CLIQUE,TRACE,DEBUG" # Equivalent to --rpc-http-api=ETH,NET,WEB3,CLIQUE
      BESU_RPC_HTTP_CORS_ORIGINS: all
      BESU_RPC_WS_API: "ETH,NET,WEB3,CLIQUE,TRACE,DEBUG" # Equivalent to --rpc-ws-api=ETH,NET,WEB3,CLIQUE
      BESU_MINER_ENABLED: "true" # Equivalent to --miner-enabled
      BESU_MINER_COINBASE: "0x0000000000000000000000000000000000000000" # Miner coinbase address
      BESU_MIN_GAS_PRICE: "0" # Equivalent to --min-gas-price=0
    ports:
      - "8545:8545" # HTTP JSON-RPC
      - "8546:8546" # WebSocket JSON-RPC
    volumes:
      - ${PWD}/packages/cactus-test-tooling/src/main/resources/chainlink/besu/genesis.json:/opt/besu/genesis.json

  proxychain:
    image: hyperledger/besu:24.12.2
    container_name: proxychain
    environment:
      BESU_NETWORK_ID: 90000002
      # https://besu.hyperledger.org/development/public-networks/how-to/monitor/logging#basic-logging
      # Valid log levels are OFF, ERROR, WARN, INFO, DEBUG, TRACE, ALL. The default level is INFO.
      BESU_LOGGING: WARN
      BESU_GENESIS_FILE: "/opt/besu/genesis.json"
      BESU_REVERT_REASON_ENABLED: true
      BESU_NETWORK: dev # Equivalent to --network=dev
      BESU_RPC_HTTP_ENABLED: "true" # Equivalent to --rpc-http-enabled
      BESU_RPC_WS_ENABLED: "true" # Equivalent to --rpc-ws-enabled
      BESU_HOST_WHITELIST: "*" # Equivalent to --host-whitelist=*
      BESU_RPC_HTTP_API: "ETH,NET,WEB3,CLIQUE,TRACE,DEBUG" # Equivalent to --rpc-http-api=ETH,NET,WEB3,CLIQUE
      BESU_RPC_HTTP_CORS_ORIGINS: all
      BESU_RPC_WS_API: "ETH,NET,WEB3,CLIQUE,TRACE,DEBUG" # Equivalent to --rpc-ws-api=ETH,NET,WEB3,CLIQUE
      BESU_MINER_ENABLED: "true" # Equivalent to --miner-enabled
      BESU_MINER_COINBASE: "0x0000000000000000000000000000000000000000" # Miner coinbase address
      BESU_MIN_GAS_PRICE: "0" # Equivalent to --min-gas-price=0
    ports:
      - "9545:8545" # HTTP JSON-RPC
      - "9546:8546" # WebSocket JSON-RPC
    volumes:
      - ${PWD}/packages/cactus-test-tooling/src/main/resources/chainlink/proxychain/genesis.json:/opt/besu/genesis.json

  cacti:
    container_name: cacti
    # image: ghcr.io/hyperledger-cacti/cactus-cmd-api-server:2024-11-15t04-48-04-dev-c4e28fd06
    restart: on-failure
    depends_on:
      besu:
          condition: service_healthy
          restart: false
      proxychain:
          condition: service_healthy
          restart: false
    build:
      context: ../../../../../../packages/cactus-cmd-api-server/
      dockerfile: cmd-api-server.Dockerfile

    volumes:
      - cactisrc:/usr/src/cacti

    ports:
      - 4000:4000

    environment:
      AUTHORIZATION_PROTOCOL: NONE
      AUTHORIZATION_CONFIG_JSON: "{}"
      API_MTLS_ENABLED: "false"
      API_TLS_ENABLED: "false"
      API_CORS_DOMAIN_CSV: \*
      API_TLS_CERT_PEM: "-"
      API_TLS_CLIENT_CA_PEM: "-"
      API_TLS_KEY_PEM: "-"
      API_HOST: 0.0.0.0
      API_PORT: 4000
      CRPC_HOST: 0.0.0.0
      GRPC_TLS_ENABLED: false
      LOG_LEVEL: DEBUG
      PLUGINS: >-
        [
          {
              "packageName": "@hyperledger/cactus-plugin-keychain-memory",
              "type": "org.hyperledger.cactus.plugin_import_type.LOCAL", 
              "action": "org.hyperledger.cactus.plugin_import_action.INSTALL",
              "options": {
                  "packageSrc": "/usr/src/cacti/packages/cactus-plugin-keychain-memory/",
                  "keychainId": "keychain_id_1",
                  "instanceId": "plugin-keychain-memory-1"
              }
          },
          {
              "packageName": "@hyperledger/cactus-plugin-ledger-connector-besu",
              "type": "org.hyperledger.cactus.plugin_import_type.LOCAL", 
              "action": "org.hyperledger.cactus.plugin_import_action.INSTALL",
              "options": {
                  "packageSrc": "/usr/src/cacti/packages/cactus-plugin-ledger-connector-besu/",
                  "rpcApiHttpHost": "http://besu:8545",
                  "rpcApiWsHost": "ws://besu:8546",
                  "instanceId": "plugin-connector-besu-1"
              }
          },
          {
              "packageName": "@hyperledger/cacti-plugin-ledger-connector-chainlink",
              "type": "org.hyperledger.cactus.plugin_import_type.LOCAL", 
              "action": "org.hyperledger.cactus.plugin_import_action.INSTALL",
              "options": {
                  "packageSrc": "/usr/src/cacti/packages/cacti-plugin-ledger-connector-chainlink/",
                  "instanceId": "plugin-connetocr-chainlink-1",
                  "ledgerHttpHost": "http://chainlink1",
                  "ledgerHttpPort": 6688
              }
          }
        ]

  cacti2:
    container_name: cacti2
    # image: ghcr.io/hyperledger-cacti/cactus-cmd-api-server:2024-11-15t04-48-04-dev-c4e28fd06
    restart: on-failure
    depends_on:
      besu:
          condition: service_healthy
          restart: false
      proxychain:
          condition: service_healthy
          restart: false
    build:
      context: ../../../../../../packages/cactus-cmd-api-server/
      dockerfile: cmd-api-server.Dockerfile

    volumes:
      - cactisrc:/usr/src/cacti

    ports:
      - 5000:4000

    extra_hosts:
        - "host.docker.internal:10.0.0.41"

    environment:
      AUTHORIZATION_PROTOCOL: NONE
      AUTHORIZATION_CONFIG_JSON: "{}"
      API_MTLS_ENABLED: "false"
      API_TLS_ENABLED: "false"
      API_CORS_DOMAIN_CSV: \*
      API_TLS_CERT_PEM: "-"
      API_TLS_CLIENT_CA_PEM: "-"
      API_TLS_KEY_PEM: "-"
      API_HOST: 0.0.0.0
      API_PORT: 4000
      CRPC_HOST: 0.0.0.0
      GRPC_TLS_ENABLED: false
      LOG_LEVEL: DEBUG
      PLUGINS: >-
        [
          {
              "packageName": "@hyperledger/cactus-plugin-ledger-connector-besu",
              "type": "org.hyperledger.cactus.plugin_import_type.LOCAL", 
              "action": "org.hyperledger.cactus.plugin_import_action.INSTALL",
              "options": {
                  "packageSrc": "/usr/src/cacti/packages/cactus-plugin-ledger-connector-besu/",
                  "rpcApiHttpHost": "http://proxychain:8545",
                  "rpcApiWsHost": "ws://proxychain:8546",
                  "instanceId": "plugin-connector-besu-2"
              }
          }
        ]

  cacti3:
    container_name: cacti3
    # image: ghcr.io/hyperledger-cacti/cactus-cmd-api-server:2024-11-15t04-48-04-dev-c4e28fd06
    restart: on-failure
    build:
      context: ../../../../../../packages/cactus-cmd-api-server/
      dockerfile: cmd-api-server.Dockerfile

    depends_on:
      fabric:
          condition: service_healthy
          restart: false

    volumes:
      - cactisrc:/usr/src/cacti

    ports:
      - 6000:4000

    # extra_hosts:
    #     - "host.docker.internal:10.0.0.41"
    #     - "peer0.org1.example.com:10.0.0.41"
    #     - "peer1.org1.example.com:10.0.0.41"
    #     - "peer0.org2.example.com:10.0.0.41"
    #     - "peer1.org2.example.com:10.0.0.41"
    #     - "orderer.example.com:10.0.0.41"
    #     - "ca.org1.example.com:10.0.0.41"

    environment:
      FABRIC_LOGGING_SPEC: DEBUG
      HFC_LOGGING: '{"debug": "console"}'
      AUTHORIZATION_PROTOCOL: NONE
      AUTHORIZATION_CONFIG_JSON: "{}"
      API_MTLS_ENABLED: "false"
      API_TLS_ENABLED: "false"
      API_CORS_DOMAIN_CSV: \*
      API_TLS_CERT_PEM: "-"
      API_TLS_CLIENT_CA_PEM: "-"
      API_TLS_KEY_PEM: "-"
      API_HOST: 0.0.0.0
      API_PORT: 4000
      CRPC_HOST: 0.0.0.0
      GRPC_TLS_ENABLED: false
      LOG_LEVEL: DEBUG
      PLUGINS: >-
        [
          {
              "packageName": "@hyperledger/cactus-plugin-keychain-memory",
              "type": "org.hyperledger.cactus.plugin_import_type.LOCAL", 
              "action": "org.hyperledger.cactus.plugin_import_action.INSTALL",
              "options": {
                  "packageSrc": "/usr/src/cacti/packages/cactus-plugin-keychain-memory/",
                  "keychainId": "keychain_id_2",
                  "instanceId": "plugin-keychain-memory-2"
              }
          },
          {
              "packageName": "@hyperledger/cactus-plugin-ledger-connector-fabric",
              "type": "org.hyperledger.cactus.plugin_import_type.LOCAL", 
              "action": "org.hyperledger.cactus.plugin_import_action.INSTALL",
              "options": {
                "packageSrc": "/usr/src/cacti/packages/cactus-plugin-ledger-connector-fabric/", 
                "instanceId": "plugin-connector-fabric-1",
                "dockerBinary": "/usr/local/bin/docker",
                "peerBinary": "/fabric-samples/bin/peer",
                "goBinary": "/usr/local/go/bin/go",
                "cliContainerEnv": {
                  "CORE_PEER_TLS_ENABLED": "true",
                  "CORE_PEER_LOCALMSPID": "Org1MSP",
                  "CORE_PEER_TLS_CERT_FILE": "/opt/gopath/src/github.com/hyperledger/fabric/peer/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt",
                  "CORE_PEER_TLS_KEY_FILE": "/opt/gopath/src/github.com/hyperledger/fabric/peer/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key",
                  "CORE_PEER_ADDRESS": "peer0.org1.example.com:7051",
                  "CORE_PEER_MSPCONFIGPATH": "/opt/gopath/src/github.com/hyperledger/fabric/peer/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp",
                  "CORE_PEER_TLS_ROOTCERT_FILE": "/opt/gopath/src/github.com/hyperledger/fabric/peer/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt",
                  "ORDERER_TLS_ROOTCERT_FILE": "/opt/gopath/src/github.com/hyperledger/fabric/peer/organizations/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem"
                },
                "sshConfig": {
                  "host": "fabric",
                  "privateKey": "-----BEGIN OPENSSH PRIVATE KEY-----\n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\n-----END OPENSSH PRIVATE KEY-----\n",
                  "username": "root",
                  "port": 22
                },
                "connectionProfile": {
                  "name": "test-network-org1",
                  "version": "1.0.0",
                  "client": {
                    "organization": "Org1",
                    "connection": { "timeout": { "peer": { "endorser": "300" } } }
                  },
                  "organizations": {
                    "Org1": {
                      "mspid": "Org1MSP",
                      "peers": ["peer0.org1.example.com"],
                      "certificateAuthorities": ["ca.org1.example.com"]
                    }
                  },
                  "peers": {
                    "peer0.org1.example.com": {
                      "url": "grpcs://localhost:7051",
                      "tlsCACerts": {
                        "pem": "-----BEGIN CERTIFICATE-----\nMIICJjCCAc2gAwIBAgIUB7c9psBLiRoTqLiYcNucL2tKd4owCgYIKoZIzj0EAwIw\ncDELMAkGA1UEBhMCVVMxFzAVBgNVBAgTDk5vcnRoIENhcm9saW5hMQ8wDQYDVQQH\nEwZEdXJoYW0xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHDAaBgNVBAMTE2Nh\nLm9yZzEuZXhhbXBsZS5jb20wHhcNMjUwMTIxMjMzMzAwWhcNNDAwMTE4MjMzMzAw\nWjBwMQswCQYDVQQGEwJVUzEXMBUGA1UECBMOTm9ydGggQ2Fyb2xpbmExDzANBgNV\nBAcTBkR1cmhhbTEZMBcGA1UEChMQb3JnMS5leGFtcGxlLmNvbTEcMBoGA1UEAxMT\nY2Eub3JnMS5leGFtcGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABKMv\n2XehzDGO+N1RJGlrcyBxvRWClRJWltyOw2mWna1Yt0qqtJVk2WRycQSQmBTSR29O\nYG6NamY1KX9JdT8ptoejRTBDMA4GA1UdDwEB/wQEAwIBBjASBgNVHRMBAf8ECDAG\nAQH/AgEBMB0GA1UdDgQWBBTZ0q6i4E/AC819Lg56Dho7Mu7X3DAKBggqhkjOPQQD\nAgNHADBEAiBCgl9t5lXrdhft14MfZ82PJMvabUt+M0jh7DWxn+VubwIgM1Gi+2aT\nmd0PGr4yR2Fg3KZIKZo/qVa7pecdiNDkO90=\n-----END CERTIFICATE-----\n"
                      },
                      "grpcOptions": {
                        "ssl-target-name-override": "peer0.org1.example.com",
                        "hostnameOverride": "peer0.org1.example.com"
                      }
                    }
                  },
                  "certificateAuthorities": {
                    "ca.org1.example.com": {
                      "url": "https://localhost:7054",
                      "caName": "ca-org1",
                      "tlsCACerts": {
                        "pem": [
                          "-----BEGIN CERTIFICATE-----\nMIICJjCCAc2gAwIBAgIUB7c9psBLiRoTqLiYcNucL2tKd4owCgYIKoZIzj0EAwIw\ncDELMAkGA1UEBhMCVVMxFzAVBgNVBAgTDk5vcnRoIENhcm9saW5hMQ8wDQYDVQQH\nEwZEdXJoYW0xGTAXBgNVBAoTEG9yZzEuZXhhbXBsZS5jb20xHDAaBgNVBAMTE2Nh\nLm9yZzEuZXhhbXBsZS5jb20wHhcNMjUwMTIxMjMzMzAwWhcNNDAwMTE4MjMzMzAw\nWjBwMQswCQYDVQQGEwJVUzEXMBUGA1UECBMOTm9ydGggQ2Fyb2xpbmExDzANBgNV\nBAcTBkR1cmhhbTEZMBcGA1UEChMQb3JnMS5leGFtcGxlLmNvbTEcMBoGA1UEAxMT\nY2Eub3JnMS5leGFtcGxlLmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABKMv\n2XehzDGO+N1RJGlrcyBxvRWClRJWltyOw2mWna1Yt0qqtJVk2WRycQSQmBTSR29O\nYG6NamY1KX9JdT8ptoejRTBDMA4GA1UdDwEB/wQEAwIBBjASBgNVHRMBAf8ECDAG\nAQH/AgEBMB0GA1UdDgQWBBTZ0q6i4E/AC819Lg56Dho7Mu7X3DAKBggqhkjOPQQD\nAgNHADBEAiBCgl9t5lXrdhft14MfZ82PJMvabUt+M0jh7DWxn+VubwIgM1Gi+2aT\nmd0PGr4yR2Fg3KZIKZo/qVa7pecdiNDkO90=\n-----END CERTIFICATE-----\n"
                        ]
                      },
                      "httpOptions": { "verify": false }
                    }
                  },
                  "orderers": {
                    "orderer.example.com": {
                      "url": "grpcs://localhost:7050",
                      "grpcOptions": { "ssl-target-name-override": "orderer.example.com" },
                      "tlsCACerts": {
                        "pem": "-----BEGIN CERTIFICATE-----\nMIICCjCCAbGgAwIBAgIUNqeIG4WE8tniY/NlqtcvKDm+0rowCgYIKoZIzj0EAwIw\nYjELMAkGA1UEBhMCVVMxETAPBgNVBAgTCE5ldyBZb3JrMREwDwYDVQQHEwhOZXcg\nWW9yazEUMBIGA1UEChMLZXhhbXBsZS5jb20xFzAVBgNVBAMTDmNhLmV4YW1wbGUu\nY29tMB4XDTI1MDEyMTIzMzMwMFoXDTQwMDExODIzMzMwMFowYjELMAkGA1UEBhMC\nVVMxETAPBgNVBAgTCE5ldyBZb3JrMREwDwYDVQQHEwhOZXcgWW9yazEUMBIGA1UE\nChMLZXhhbXBsZS5jb20xFzAVBgNVBAMTDmNhLmV4YW1wbGUuY29tMFkwEwYHKoZI\nzj0CAQYIKoZIzj0DAQcDQgAEHjpr3FzVCK4kyuho7Zw0qBBFqSZdRNOATmJcYEzw\nGGoAqvnA7s8K31RfUxODQRZ9xo4CG3axJibpl3cPdKtAiKNFMEMwDgYDVR0PAQH/\nBAQDAgEGMBIGA1UdEwEB/wQIMAYBAf8CAQEwHQYDVR0OBBYEFJBUT9krumdYWY6e\nXdx0txd9hls8MAoGCCqGSM49BAMCA0cAMEQCIDo9EbPzLZMRQMZC1VAONOK0mtbd\nRbByvbdidw8V8FuKAiAkc/kBipDNmf5sXEIHbHmgSnL1ibsUdiAq6ii+kv55Kg==\n-----END CERTIFICATE-----\n"
                      }
                    }
                  },
                  "channels": {
                    "mychannel": {
                      "orderers": ["orderer.example.com"],
                      "peers": {
                        "peer0.org1.example.com": {
                          "endorsingPeer": true,
                          "chaincodeQuery": true,
                          "ledgerQuery": true,
                          "eventSource": true,
                          "discover": true
                        }
                      }
                    }
                  }
                },
                "discoveryOptions": { "enabled": true, "asLocalhost": false },
                "eventHandlerOptions": {
                  "strategy": "NETWORK_SCOPE_ALLFORTX",
                  "commitTimeout": 300
                }
              }
          }
        ]

  # Works for contract deployment but not for sending transactions to said contract...
  #
  fabric:

    container_name: fabric
    # image: ghcr.io/hyperledger/cactus-fabric2-all-in-one:2024-03-03--issue-2945-fabric-v2-5-6
    image: chainlink-fabric:latest
    privileged: true
    build:
      context: ../../../../../../tools/docker/fabric-all-in-one/
      dockerfile: ./Dockerfile_v2.x
    networks:
      default:
        aliases:
        - "peer0.org1.example.com"
        - "peer1.org1.example.com"
        - "peer0.org2.example.com"
        - "peer1.org2.example.com"
        - "orderer.example.com"
        - "ca.org1.example.com"

    # extra_hosts:
    #     - "host.docker.internal:10.0.0.41"
    #     - "peer0.org1.example.com:10.0.0.41"
    #     - "peer1.org1.example.com:10.0.0.41"
    #     - "peer0.org2.example.com:10.0.0.41"
    #     - "peer1.org2.example.com:10.0.0.41"
    #     - "orderer.example.com:10.0.0.41"
    #     - "ca.org1.example.com:10.0.0.41"

    ports:
      - "30022:22" # SSH
      - "7050:7050" # orderer.example.com
      - "7051:7051" # peer0.org1.example.com
      - "9051:9051" # peer0.org2.example.com
      - "7054:7054" # ca_org1
      - "8054:8054" # ca_org2
      - "9054:9054" # ca_orderer
    environment:
      - FABRIC_VERSION=${CACTUS_FABRIC_ALL_IN_ONE_VERSION:-2.5.6}
      - FABRIC_NODEENV_VERSION=${CACTUS_FABRIC_ALL_IN_ONE_NODEENV_VERSION:-2.5.4}
      - CA_VERSION=${CACTUS_FABRIC_ALL_IN_ONE_CA_VERSION:-1.5.3}
      - COUCH_VERSION_FABRIC=${CACTUS_FABRIC_ALL_IN_ONE_COUCH_VERSION_FABRIC:-0.4}
      - COUCH_VERSION=${CACTUS_FABRIC_ALL_IN_ONE_COUCH_VERSION:-3.2.2}
      - CACTUS_FABRIC_TEST_LOOSE_MEMBERSHIP=1
  

volumes:
  cactisrc:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /home/peter/a/cacti-upstream/
