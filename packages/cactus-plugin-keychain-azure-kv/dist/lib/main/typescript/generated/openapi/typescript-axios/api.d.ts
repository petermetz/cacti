/**
 * Hyperledger Cacti - Keychain API for Azure Key Vault
 * Contains/describes the Keychain API types/paths for Hyperledger Cactus.
 *
 * The version of the OpenAPI document: 2.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface DeleteKeychainEntryRequestV1
 */
export interface DeleteKeychainEntryRequestV1 {
    /**
     * The key for the entry to check the presence of on the keychain.
     * @type {string}
     * @memberof DeleteKeychainEntryRequestV1
     */
    'key': string;
}
/**
 *
 * @export
 * @interface DeleteKeychainEntryResponseV1
 */
export interface DeleteKeychainEntryResponseV1 {
    /**
     * The key that was deleted from the keychain.
     * @type {string}
     * @memberof DeleteKeychainEntryResponseV1
     */
    'key': string;
}
/**
 *
 * @export
 * @interface GetKeychainEntryRequestV1
 */
export interface GetKeychainEntryRequestV1 {
    /**
     * The key for the entry to get from the keychain.
     * @type {string}
     * @memberof GetKeychainEntryRequestV1
     */
    'key': string;
}
/**
 *
 * @export
 * @interface GetKeychainEntryResponseV1
 */
export interface GetKeychainEntryResponseV1 {
    /**
     * The key that was used to retrieve the value from the keychain.
     * @type {string}
     * @memberof GetKeychainEntryResponseV1
     */
    'key': string;
    /**
     * The value associated with the requested key on the keychain.
     * @type {string}
     * @memberof GetKeychainEntryResponseV1
     */
    'value': string;
}
/**
 *
 * @export
 * @interface HasKeychainEntryRequestV1
 */
export interface HasKeychainEntryRequestV1 {
    /**
     * The key to check for presence in the keychain.
     * @type {string}
     * @memberof HasKeychainEntryRequestV1
     */
    'key': string;
}
/**
 *
 * @export
 * @interface HasKeychainEntryResponseV1
 */
export interface HasKeychainEntryResponseV1 {
    /**
     * The key that was used to check the presence of the value in the entry store.
     * @type {string}
     * @memberof HasKeychainEntryResponseV1
     */
    'key': string;
    /**
     * Date and time encoded as JSON when the presence check was performed by the plugin backend.
     * @type {string}
     * @memberof HasKeychainEntryResponseV1
     */
    'checkedAt': string;
    /**
     * The boolean true or false indicating the presence or absence of an entry under \'key\'.
     * @type {boolean}
     * @memberof HasKeychainEntryResponseV1
     */
    'isPresent': boolean;
}
/**
 *
 * @export
 * @interface SetKeychainEntryRequestV1
 */
export interface SetKeychainEntryRequestV1 {
    /**
     * The key for the entry to set on the keychain.
     * @type {string}
     * @memberof SetKeychainEntryRequestV1
     */
    'key': string;
    /**
     * The value that will be associated with the key on the keychain.
     * @type {string}
     * @memberof SetKeychainEntryRequestV1
     */
    'value': string;
}
/**
 *
 * @export
 * @interface SetKeychainEntryResponseV1
 */
export interface SetKeychainEntryResponseV1 {
    /**
     * The key that was used to set the value on the keychain.
     * @type {string}
     * @memberof SetKeychainEntryResponseV1
     */
    'key': string;
}
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export declare const DefaultApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Deletes a value under a key on the keychain backend.
     * @param {DeleteKeychainEntryRequestV1} deleteKeychainEntryRequestV1 Request body to delete a keychain entry via its key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteKeychainEntryV1: (deleteKeychainEntryRequestV1: DeleteKeychainEntryRequestV1, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves the contents of a keychain entry from the backend.
     * @param {GetKeychainEntryRequestV1} getKeychainEntryRequestV1 Request body to obtain a keychain entry via its key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getKeychainEntryV1: (getKeychainEntryRequestV1: GetKeychainEntryRequestV1, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Checks that an entry exists under a key on the keychain backend
     * @param {HasKeychainEntryRequestV1} hasKeychainEntryRequestV1 Request body for checking a keychain entry via its key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hasKeychainEntryV1: (hasKeychainEntryRequestV1: HasKeychainEntryRequestV1, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Sets a value under a key on the keychain backend.
     * @param {SetKeychainEntryRequestV1} setKeychainEntryRequestV1 Request body to write/update a keychain entry via its key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setKeychainEntryV1: (setKeychainEntryRequestV1: SetKeychainEntryRequestV1, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export declare const DefaultApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Deletes a value under a key on the keychain backend.
     * @param {DeleteKeychainEntryRequestV1} deleteKeychainEntryRequestV1 Request body to delete a keychain entry via its key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteKeychainEntryV1(deleteKeychainEntryRequestV1: DeleteKeychainEntryRequestV1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteKeychainEntryResponseV1>>;
    /**
     *
     * @summary Retrieves the contents of a keychain entry from the backend.
     * @param {GetKeychainEntryRequestV1} getKeychainEntryRequestV1 Request body to obtain a keychain entry via its key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getKeychainEntryV1(getKeychainEntryRequestV1: GetKeychainEntryRequestV1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetKeychainEntryResponseV1>>;
    /**
     *
     * @summary Checks that an entry exists under a key on the keychain backend
     * @param {HasKeychainEntryRequestV1} hasKeychainEntryRequestV1 Request body for checking a keychain entry via its key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hasKeychainEntryV1(hasKeychainEntryRequestV1: HasKeychainEntryRequestV1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HasKeychainEntryResponseV1>>;
    /**
     *
     * @summary Sets a value under a key on the keychain backend.
     * @param {SetKeychainEntryRequestV1} setKeychainEntryRequestV1 Request body to write/update a keychain entry via its key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setKeychainEntryV1(setKeychainEntryRequestV1: SetKeychainEntryRequestV1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetKeychainEntryResponseV1>>;
};
/**
 * DefaultApi - factory interface
 * @export
 */
export declare const DefaultApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Deletes a value under a key on the keychain backend.
     * @param {DeleteKeychainEntryRequestV1} deleteKeychainEntryRequestV1 Request body to delete a keychain entry via its key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteKeychainEntryV1(deleteKeychainEntryRequestV1: DeleteKeychainEntryRequestV1, options?: any): AxiosPromise<DeleteKeychainEntryResponseV1>;
    /**
     *
     * @summary Retrieves the contents of a keychain entry from the backend.
     * @param {GetKeychainEntryRequestV1} getKeychainEntryRequestV1 Request body to obtain a keychain entry via its key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getKeychainEntryV1(getKeychainEntryRequestV1: GetKeychainEntryRequestV1, options?: any): AxiosPromise<GetKeychainEntryResponseV1>;
    /**
     *
     * @summary Checks that an entry exists under a key on the keychain backend
     * @param {HasKeychainEntryRequestV1} hasKeychainEntryRequestV1 Request body for checking a keychain entry via its key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hasKeychainEntryV1(hasKeychainEntryRequestV1: HasKeychainEntryRequestV1, options?: any): AxiosPromise<HasKeychainEntryResponseV1>;
    /**
     *
     * @summary Sets a value under a key on the keychain backend.
     * @param {SetKeychainEntryRequestV1} setKeychainEntryRequestV1 Request body to write/update a keychain entry via its key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setKeychainEntryV1(setKeychainEntryRequestV1: SetKeychainEntryRequestV1, options?: any): AxiosPromise<SetKeychainEntryResponseV1>;
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export declare class DefaultApi extends BaseAPI {
    /**
     *
     * @summary Deletes a value under a key on the keychain backend.
     * @param {DeleteKeychainEntryRequestV1} deleteKeychainEntryRequestV1 Request body to delete a keychain entry via its key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    deleteKeychainEntryV1(deleteKeychainEntryRequestV1: DeleteKeychainEntryRequestV1, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteKeychainEntryResponseV1, any>>;
    /**
     *
     * @summary Retrieves the contents of a keychain entry from the backend.
     * @param {GetKeychainEntryRequestV1} getKeychainEntryRequestV1 Request body to obtain a keychain entry via its key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    getKeychainEntryV1(getKeychainEntryRequestV1: GetKeychainEntryRequestV1, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetKeychainEntryResponseV1, any>>;
    /**
     *
     * @summary Checks that an entry exists under a key on the keychain backend
     * @param {HasKeychainEntryRequestV1} hasKeychainEntryRequestV1 Request body for checking a keychain entry via its key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    hasKeychainEntryV1(hasKeychainEntryRequestV1: HasKeychainEntryRequestV1, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<HasKeychainEntryResponseV1, any>>;
    /**
     *
     * @summary Sets a value under a key on the keychain backend.
     * @param {SetKeychainEntryRequestV1} setKeychainEntryRequestV1 Request body to write/update a keychain entry via its key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    setKeychainEntryV1(setKeychainEntryRequestV1: SetKeychainEntryRequestV1, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SetKeychainEntryResponseV1, any>>;
}
